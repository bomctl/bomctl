# ------------------------------------------------------------------------
# SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
# SPDX-FileName: .github/workflows/release.yml
# SPDX-FileType: SOURCE
# SPDX-License-Identifier: Apache-2.0
# ------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------
---
name: release

on:
  push:
    branches:
      - "**"

permissions:
  contents: read

jobs:
  prepare-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write # needed to push commit/tag

    env:
      should_publish: ${{ contains(fromJSON('["main", "next", "dev", "alpha"]'), github.ref_name) || endsWith(github.ref, '.x') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GORELEASER_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: "1.21"
          cache: false

      - name: Install Semantic Version Util
        run: go install github.com/caarlos0/svu@a4642ead109ca37441f573f0118a4e79a7ac9a2f # v1.12.0

      - name: Get next release version
        id: next-version
        run: |
          next_version="$(.github/scripts/semver-util.sh next)"
          .github/scripts/semver-util.sh print

          echo "next-version=${next_version}" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        if: fromJSON(env.should_publish)
        id: tag-exists
        env:
          NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: |
          [[ -n $(git tag --list "$NEXT_VERSION") ]] && tag_exists="true" || tag_exists="false"
          echo "tag-exists=${tag_exists}" >> "$GITHUB_OUTPUT"

      - name: Push tag for next release
        if: fromJSON(env.should_publish) && fromJSON(steps.tag-exists.outputs.tag-exists)
        env:
          NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git tag --annotate "${NEXT_VERSION}" --message="${NEXT_VERSION}"
          git push --tags
