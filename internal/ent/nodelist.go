// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/nodelist.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bomctl/bomctl/internal/ent/document"
	"github.com/bomctl/bomctl/internal/ent/nodelist"
)

// NodeList is the model entity for the NodeList schema.
type NodeList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RootElements holds the value of the "root_elements" field.
	RootElements string `json:"root_elements,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeListQuery when eager-loading is set.
	Edges              NodeListEdges `json:"edges"`
	document_node_list *int
	selectValues       sql.SelectValues
}

// NodeListEdges holds the relations/edges for other nodes in the graph.
type NodeListEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Nodes holds the value of the nodes edge.
	Nodes []*Node `json:"nodes,omitempty"`
	// Edges holds the value of the edges edge.
	Edges []*Edge `json:"edges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeListEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// NodesOrErr returns the Nodes value or an error if the edge
// was not loaded in eager-loading.
func (e NodeListEdges) NodesOrErr() ([]*Node, error) {
	if e.loadedTypes[1] {
		return e.Nodes, nil
	}
	return nil, &NotLoadedError{edge: "nodes"}
}

// EdgesOrErr returns the Edges value or an error if the edge
// was not loaded in eager-loading.
func (e NodeListEdges) EdgesOrErr() ([]*Edge, error) {
	if e.loadedTypes[2] {
		return e.Edges, nil
	}
	return nil, &NotLoadedError{edge: "edges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodeList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodelist.FieldID:
			values[i] = new(sql.NullInt64)
		case nodelist.FieldRootElements:
			values[i] = new(sql.NullString)
		case nodelist.ForeignKeys[0]: // document_node_list
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodeList fields.
func (nl *NodeList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodelist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nl.ID = int(value.Int64)
		case nodelist.FieldRootElements:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_elements", values[i])
			} else if value.Valid {
				nl.RootElements = value.String
			}
		case nodelist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field document_node_list", value)
			} else if value.Valid {
				nl.document_node_list = new(int)
				*nl.document_node_list = int(value.Int64)
			}
		default:
			nl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NodeList.
// This includes values selected through modifiers, order, etc.
func (nl *NodeList) Value(name string) (ent.Value, error) {
	return nl.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the NodeList entity.
func (nl *NodeList) QueryDocument() *DocumentQuery {
	return NewNodeListClient(nl.config).QueryDocument(nl)
}

// QueryNodes queries the "nodes" edge of the NodeList entity.
func (nl *NodeList) QueryNodes() *NodeQuery {
	return NewNodeListClient(nl.config).QueryNodes(nl)
}

// QueryEdges queries the "edges" edge of the NodeList entity.
func (nl *NodeList) QueryEdges() *EdgeQuery {
	return NewNodeListClient(nl.config).QueryEdges(nl)
}

// Update returns a builder for updating this NodeList.
// Note that you need to call NodeList.Unwrap() before calling this method if this NodeList
// was returned from a transaction, and the transaction was committed or rolled back.
func (nl *NodeList) Update() *NodeListUpdateOne {
	return NewNodeListClient(nl.config).UpdateOne(nl)
}

// Unwrap unwraps the NodeList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nl *NodeList) Unwrap() *NodeList {
	_tx, ok := nl.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodeList is not a transactional entity")
	}
	nl.config.driver = _tx.drv
	return nl
}

// String implements the fmt.Stringer.
func (nl *NodeList) String() string {
	var builder strings.Builder
	builder.WriteString("NodeList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nl.ID))
	builder.WriteString("root_elements=")
	builder.WriteString(nl.RootElements)
	builder.WriteByte(')')
	return builder.String()
}

// NodeLists is a parsable slice of NodeList.
type NodeLists []*NodeList
