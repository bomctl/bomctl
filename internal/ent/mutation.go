// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/github.com/bomctl/bomctl/internal/ent.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bomctl/bomctl/internal/ent/document"
	"github.com/bomctl/bomctl/internal/ent/documenttype"
	"github.com/bomctl/bomctl/internal/ent/edge"
	"github.com/bomctl/bomctl/internal/ent/externalreference"
	"github.com/bomctl/bomctl/internal/ent/hashesentry"
	"github.com/bomctl/bomctl/internal/ent/identifiersentry"
	"github.com/bomctl/bomctl/internal/ent/metadata"
	"github.com/bomctl/bomctl/internal/ent/node"
	"github.com/bomctl/bomctl/internal/ent/nodelist"
	"github.com/bomctl/bomctl/internal/ent/person"
	"github.com/bomctl/bomctl/internal/ent/predicate"
	"github.com/bomctl/bomctl/internal/ent/timestamp"
	"github.com/bomctl/bomctl/internal/ent/tool"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDocument          = "Document"
	TypeDocumentType      = "DocumentType"
	TypeEdge              = "Edge"
	TypeExternalReference = "ExternalReference"
	TypeHashesEntry       = "HashesEntry"
	TypeIdentifiersEntry  = "IdentifiersEntry"
	TypeMetadata          = "Metadata"
	TypeNode              = "Node"
	TypeNodeList          = "NodeList"
	TypePerson            = "Person"
	TypeTimestamp         = "Timestamp"
	TypeTool              = "Tool"
)

// DocumentMutation represents an operation that mutates the Document nodes in the graph.
type DocumentMutation struct {
	config
	op               Op
	typ              string
	id               *int
	clearedFields    map[string]struct{}
	metadata         *string
	clearedmetadata  bool
	node_list        *int
	clearednode_list bool
	done             bool
	oldValue         func(context.Context) (*Document, error)
	predicates       []predicate.Document
}

var _ ent.Mutation = (*DocumentMutation)(nil)

// documentOption allows management of the mutation configuration using functional options.
type documentOption func(*DocumentMutation)

// newDocumentMutation creates new mutation for the Document entity.
func newDocumentMutation(c config, op Op, opts ...documentOption) *DocumentMutation {
	m := &DocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDocumentID sets the ID field of the mutation.
func withDocumentID(id int) documentOption {
	return func(m *DocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *Document
		)
		m.oldValue = func(ctx context.Context) (*Document, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Document.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDocument sets the old Document of the mutation.
func withDocument(node *Document) documentOption {
	return func(m *DocumentMutation) {
		m.oldValue = func(context.Context) (*Document, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Document.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by id.
func (m *DocumentMutation) SetMetadataID(id string) {
	m.metadata = &id
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *DocumentMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *DocumentMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataID returns the "metadata" edge ID in the mutation.
func (m *DocumentMutation) MetadataID() (id string, exists bool) {
	if m.metadata != nil {
		return *m.metadata, true
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *DocumentMutation) MetadataIDs() (ids []string) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *DocumentMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by id.
func (m *DocumentMutation) SetNodeListID(id int) {
	m.node_list = &id
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (m *DocumentMutation) ClearNodeList() {
	m.clearednode_list = true
}

// NodeListCleared reports if the "node_list" edge to the NodeList entity was cleared.
func (m *DocumentMutation) NodeListCleared() bool {
	return m.clearednode_list
}

// NodeListID returns the "node_list" edge ID in the mutation.
func (m *DocumentMutation) NodeListID() (id int, exists bool) {
	if m.node_list != nil {
		return *m.node_list, true
	}
	return
}

// NodeListIDs returns the "node_list" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeListID instead. It exists only for internal usage by the builders.
func (m *DocumentMutation) NodeListIDs() (ids []int) {
	if id := m.node_list; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNodeList resets all changes to the "node_list" edge.
func (m *DocumentMutation) ResetNodeList() {
	m.node_list = nil
	m.clearednode_list = false
}

// Where appends a list predicates to the DocumentMutation builder.
func (m *DocumentMutation) Where(ps ...predicate.Document) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DocumentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DocumentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Document, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DocumentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DocumentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Document).
func (m *DocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DocumentMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DocumentMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Document field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DocumentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DocumentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Document numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DocumentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DocumentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Document nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DocumentMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.metadata != nil {
		edges = append(edges, document.EdgeMetadata)
	}
	if m.node_list != nil {
		edges = append(edges, document.EdgeNodeList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DocumentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case document.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	case document.EdgeNodeList:
		if id := m.node_list; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DocumentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmetadata {
		edges = append(edges, document.EdgeMetadata)
	}
	if m.clearednode_list {
		edges = append(edges, document.EdgeNodeList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DocumentMutation) EdgeCleared(name string) bool {
	switch name {
	case document.EdgeMetadata:
		return m.clearedmetadata
	case document.EdgeNodeList:
		return m.clearednode_list
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DocumentMutation) ClearEdge(name string) error {
	switch name {
	case document.EdgeMetadata:
		m.ClearMetadata()
		return nil
	case document.EdgeNodeList:
		m.ClearNodeList()
		return nil
	}
	return fmt.Errorf("unknown Document unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DocumentMutation) ResetEdge(name string) error {
	switch name {
	case document.EdgeMetadata:
		m.ResetMetadata()
		return nil
	case document.EdgeNodeList:
		m.ResetNodeList()
		return nil
	}
	return fmt.Errorf("unknown Document edge %s", name)
}

// DocumentTypeMutation represents an operation that mutates the DocumentType nodes in the graph.
type DocumentTypeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_type           *documenttype.Type
	name            *string
	description     *string
	clearedFields   map[string]struct{}
	metadata        *string
	clearedmetadata bool
	done            bool
	oldValue        func(context.Context) (*DocumentType, error)
	predicates      []predicate.DocumentType
}

var _ ent.Mutation = (*DocumentTypeMutation)(nil)

// documenttypeOption allows management of the mutation configuration using functional options.
type documenttypeOption func(*DocumentTypeMutation)

// newDocumentTypeMutation creates new mutation for the DocumentType entity.
func newDocumentTypeMutation(c config, op Op, opts ...documenttypeOption) *DocumentTypeMutation {
	m := &DocumentTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDocumentType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDocumentTypeID sets the ID field of the mutation.
func withDocumentTypeID(id int) documenttypeOption {
	return func(m *DocumentTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *DocumentType
		)
		m.oldValue = func(ctx context.Context) (*DocumentType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DocumentType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDocumentType sets the old DocumentType of the mutation.
func withDocumentType(node *DocumentType) documenttypeOption {
	return func(m *DocumentTypeMutation) {
		m.oldValue = func(context.Context) (*DocumentType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DocumentTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DocumentTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DocumentTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DocumentTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DocumentType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *DocumentTypeMutation) SetType(d documenttype.Type) {
	m._type = &d
}

// GetType returns the value of the "type" field in the mutation.
func (m *DocumentTypeMutation) GetType() (r documenttype.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the DocumentType entity.
// If the DocumentType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentTypeMutation) OldType(ctx context.Context) (v documenttype.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *DocumentTypeMutation) ClearType() {
	m._type = nil
	m.clearedFields[documenttype.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *DocumentTypeMutation) TypeCleared() bool {
	_, ok := m.clearedFields[documenttype.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *DocumentTypeMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, documenttype.FieldType)
}

// SetName sets the "name" field.
func (m *DocumentTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DocumentTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DocumentType entity.
// If the DocumentType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *DocumentTypeMutation) ClearName() {
	m.name = nil
	m.clearedFields[documenttype.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *DocumentTypeMutation) NameCleared() bool {
	_, ok := m.clearedFields[documenttype.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *DocumentTypeMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, documenttype.FieldName)
}

// SetDescription sets the "description" field.
func (m *DocumentTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DocumentTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DocumentType entity.
// If the DocumentType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentTypeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *DocumentTypeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[documenttype.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *DocumentTypeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[documenttype.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *DocumentTypeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, documenttype.FieldDescription)
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by id.
func (m *DocumentTypeMutation) SetMetadataID(id string) {
	m.metadata = &id
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *DocumentTypeMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *DocumentTypeMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataID returns the "metadata" edge ID in the mutation.
func (m *DocumentTypeMutation) MetadataID() (id string, exists bool) {
	if m.metadata != nil {
		return *m.metadata, true
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *DocumentTypeMutation) MetadataIDs() (ids []string) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *DocumentTypeMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// Where appends a list predicates to the DocumentTypeMutation builder.
func (m *DocumentTypeMutation) Where(ps ...predicate.DocumentType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DocumentTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DocumentTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DocumentType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DocumentTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DocumentTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DocumentType).
func (m *DocumentTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DocumentTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, documenttype.FieldType)
	}
	if m.name != nil {
		fields = append(fields, documenttype.FieldName)
	}
	if m.description != nil {
		fields = append(fields, documenttype.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DocumentTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case documenttype.FieldType:
		return m.GetType()
	case documenttype.FieldName:
		return m.Name()
	case documenttype.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DocumentTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case documenttype.FieldType:
		return m.OldType(ctx)
	case documenttype.FieldName:
		return m.OldName(ctx)
	case documenttype.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown DocumentType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case documenttype.FieldType:
		v, ok := value.(documenttype.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case documenttype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case documenttype.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown DocumentType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DocumentTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DocumentTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DocumentType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DocumentTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(documenttype.FieldType) {
		fields = append(fields, documenttype.FieldType)
	}
	if m.FieldCleared(documenttype.FieldName) {
		fields = append(fields, documenttype.FieldName)
	}
	if m.FieldCleared(documenttype.FieldDescription) {
		fields = append(fields, documenttype.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DocumentTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DocumentTypeMutation) ClearField(name string) error {
	switch name {
	case documenttype.FieldType:
		m.ClearType()
		return nil
	case documenttype.FieldName:
		m.ClearName()
		return nil
	case documenttype.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown DocumentType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DocumentTypeMutation) ResetField(name string) error {
	switch name {
	case documenttype.FieldType:
		m.ResetType()
		return nil
	case documenttype.FieldName:
		m.ResetName()
		return nil
	case documenttype.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown DocumentType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DocumentTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metadata != nil {
		edges = append(edges, documenttype.EdgeMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DocumentTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case documenttype.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DocumentTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DocumentTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DocumentTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetadata {
		edges = append(edges, documenttype.EdgeMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DocumentTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case documenttype.EdgeMetadata:
		return m.clearedmetadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DocumentTypeMutation) ClearEdge(name string) error {
	switch name {
	case documenttype.EdgeMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown DocumentType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DocumentTypeMutation) ResetEdge(name string) error {
	switch name {
	case documenttype.EdgeMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown DocumentType edge %s", name)
}

// EdgeMutation represents an operation that mutates the Edge nodes in the graph.
type EdgeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *edge.Type
	from          *string
	to            *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Edge, error)
	predicates    []predicate.Edge
}

var _ ent.Mutation = (*EdgeMutation)(nil)

// edgeOption allows management of the mutation configuration using functional options.
type edgeOption func(*EdgeMutation)

// newEdgeMutation creates new mutation for the Edge entity.
func newEdgeMutation(c config, op Op, opts ...edgeOption) *EdgeMutation {
	m := &EdgeMutation{
		config:        c,
		op:            op,
		typ:           TypeEdge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEdgeID sets the ID field of the mutation.
func withEdgeID(id int) edgeOption {
	return func(m *EdgeMutation) {
		var (
			err   error
			once  sync.Once
			value *Edge
		)
		m.oldValue = func(ctx context.Context) (*Edge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Edge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEdge sets the old Edge of the mutation.
func withEdge(node *Edge) edgeOption {
	return func(m *EdgeMutation) {
		m.oldValue = func(context.Context) (*Edge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EdgeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EdgeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EdgeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EdgeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Edge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *EdgeMutation) SetType(e edge.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *EdgeMutation) GetType() (r edge.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Edge entity.
// If the Edge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EdgeMutation) OldType(ctx context.Context) (v edge.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EdgeMutation) ResetType() {
	m._type = nil
}

// SetFrom sets the "from" field.
func (m *EdgeMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *EdgeMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the Edge entity.
// If the Edge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EdgeMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "from" field.
func (m *EdgeMutation) ResetFrom() {
	m.from = nil
}

// SetTo sets the "to" field.
func (m *EdgeMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *EdgeMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the Edge entity.
// If the Edge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EdgeMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *EdgeMutation) ResetTo() {
	m.to = nil
}

// Where appends a list predicates to the EdgeMutation builder.
func (m *EdgeMutation) Where(ps ...predicate.Edge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EdgeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EdgeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Edge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EdgeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EdgeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Edge).
func (m *EdgeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EdgeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, edge.FieldType)
	}
	if m.from != nil {
		fields = append(fields, edge.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, edge.FieldTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EdgeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case edge.FieldType:
		return m.GetType()
	case edge.FieldFrom:
		return m.From()
	case edge.FieldTo:
		return m.To()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EdgeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case edge.FieldType:
		return m.OldType(ctx)
	case edge.FieldFrom:
		return m.OldFrom(ctx)
	case edge.FieldTo:
		return m.OldTo(ctx)
	}
	return nil, fmt.Errorf("unknown Edge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EdgeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case edge.FieldType:
		v, ok := value.(edge.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case edge.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case edge.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	}
	return fmt.Errorf("unknown Edge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EdgeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EdgeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EdgeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Edge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EdgeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EdgeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EdgeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Edge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EdgeMutation) ResetField(name string) error {
	switch name {
	case edge.FieldType:
		m.ResetType()
		return nil
	case edge.FieldFrom:
		m.ResetFrom()
		return nil
	case edge.FieldTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown Edge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EdgeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EdgeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EdgeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EdgeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EdgeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EdgeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EdgeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Edge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EdgeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Edge edge %s", name)
}

// ExternalReferenceMutation represents an operation that mutates the ExternalReference nodes in the graph.
type ExternalReferenceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	url           *string
	comment       *string
	authority     *string
	_type         *externalreference.Type
	clearedFields map[string]struct{}
	nodes         map[string]struct{}
	removednodes  map[string]struct{}
	clearednodes  bool
	hashes        map[int]struct{}
	removedhashes map[int]struct{}
	clearedhashes bool
	done          bool
	oldValue      func(context.Context) (*ExternalReference, error)
	predicates    []predicate.ExternalReference
}

var _ ent.Mutation = (*ExternalReferenceMutation)(nil)

// externalreferenceOption allows management of the mutation configuration using functional options.
type externalreferenceOption func(*ExternalReferenceMutation)

// newExternalReferenceMutation creates new mutation for the ExternalReference entity.
func newExternalReferenceMutation(c config, op Op, opts ...externalreferenceOption) *ExternalReferenceMutation {
	m := &ExternalReferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeExternalReference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExternalReferenceID sets the ID field of the mutation.
func withExternalReferenceID(id int) externalreferenceOption {
	return func(m *ExternalReferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *ExternalReference
		)
		m.oldValue = func(ctx context.Context) (*ExternalReference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExternalReference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExternalReference sets the old ExternalReference of the mutation.
func withExternalReference(node *ExternalReference) externalreferenceOption {
	return func(m *ExternalReferenceMutation) {
		m.oldValue = func(context.Context) (*ExternalReference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExternalReferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExternalReferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExternalReferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExternalReferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExternalReference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *ExternalReferenceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ExternalReferenceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the ExternalReference entity.
// If the ExternalReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalReferenceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ExternalReferenceMutation) ResetURL() {
	m.url = nil
}

// SetComment sets the "comment" field.
func (m *ExternalReferenceMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ExternalReferenceMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the ExternalReference entity.
// If the ExternalReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalReferenceMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *ExternalReferenceMutation) ResetComment() {
	m.comment = nil
}

// SetAuthority sets the "authority" field.
func (m *ExternalReferenceMutation) SetAuthority(s string) {
	m.authority = &s
}

// Authority returns the value of the "authority" field in the mutation.
func (m *ExternalReferenceMutation) Authority() (r string, exists bool) {
	v := m.authority
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthority returns the old "authority" field's value of the ExternalReference entity.
// If the ExternalReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalReferenceMutation) OldAuthority(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthority: %w", err)
	}
	return oldValue.Authority, nil
}

// ResetAuthority resets all changes to the "authority" field.
func (m *ExternalReferenceMutation) ResetAuthority() {
	m.authority = nil
}

// SetType sets the "type" field.
func (m *ExternalReferenceMutation) SetType(e externalreference.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *ExternalReferenceMutation) GetType() (r externalreference.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the ExternalReference entity.
// If the ExternalReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalReferenceMutation) OldType(ctx context.Context) (v externalreference.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ExternalReferenceMutation) ResetType() {
	m._type = nil
}

// AddNodeIDs adds the "nodes" edge to the Node entity by ids.
func (m *ExternalReferenceMutation) AddNodeIDs(ids ...string) {
	if m.nodes == nil {
		m.nodes = make(map[string]struct{})
	}
	for i := range ids {
		m.nodes[ids[i]] = struct{}{}
	}
}

// ClearNodes clears the "nodes" edge to the Node entity.
func (m *ExternalReferenceMutation) ClearNodes() {
	m.clearednodes = true
}

// NodesCleared reports if the "nodes" edge to the Node entity was cleared.
func (m *ExternalReferenceMutation) NodesCleared() bool {
	return m.clearednodes
}

// RemoveNodeIDs removes the "nodes" edge to the Node entity by IDs.
func (m *ExternalReferenceMutation) RemoveNodeIDs(ids ...string) {
	if m.removednodes == nil {
		m.removednodes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.nodes, ids[i])
		m.removednodes[ids[i]] = struct{}{}
	}
}

// RemovedNodes returns the removed IDs of the "nodes" edge to the Node entity.
func (m *ExternalReferenceMutation) RemovedNodesIDs() (ids []string) {
	for id := range m.removednodes {
		ids = append(ids, id)
	}
	return
}

// NodesIDs returns the "nodes" edge IDs in the mutation.
func (m *ExternalReferenceMutation) NodesIDs() (ids []string) {
	for id := range m.nodes {
		ids = append(ids, id)
	}
	return
}

// ResetNodes resets all changes to the "nodes" edge.
func (m *ExternalReferenceMutation) ResetNodes() {
	m.nodes = nil
	m.clearednodes = false
	m.removednodes = nil
}

// AddHashIDs adds the "hashes" edge to the HashesEntry entity by ids.
func (m *ExternalReferenceMutation) AddHashIDs(ids ...int) {
	if m.hashes == nil {
		m.hashes = make(map[int]struct{})
	}
	for i := range ids {
		m.hashes[ids[i]] = struct{}{}
	}
}

// ClearHashes clears the "hashes" edge to the HashesEntry entity.
func (m *ExternalReferenceMutation) ClearHashes() {
	m.clearedhashes = true
}

// HashesCleared reports if the "hashes" edge to the HashesEntry entity was cleared.
func (m *ExternalReferenceMutation) HashesCleared() bool {
	return m.clearedhashes
}

// RemoveHashIDs removes the "hashes" edge to the HashesEntry entity by IDs.
func (m *ExternalReferenceMutation) RemoveHashIDs(ids ...int) {
	if m.removedhashes == nil {
		m.removedhashes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hashes, ids[i])
		m.removedhashes[ids[i]] = struct{}{}
	}
}

// RemovedHashes returns the removed IDs of the "hashes" edge to the HashesEntry entity.
func (m *ExternalReferenceMutation) RemovedHashesIDs() (ids []int) {
	for id := range m.removedhashes {
		ids = append(ids, id)
	}
	return
}

// HashesIDs returns the "hashes" edge IDs in the mutation.
func (m *ExternalReferenceMutation) HashesIDs() (ids []int) {
	for id := range m.hashes {
		ids = append(ids, id)
	}
	return
}

// ResetHashes resets all changes to the "hashes" edge.
func (m *ExternalReferenceMutation) ResetHashes() {
	m.hashes = nil
	m.clearedhashes = false
	m.removedhashes = nil
}

// Where appends a list predicates to the ExternalReferenceMutation builder.
func (m *ExternalReferenceMutation) Where(ps ...predicate.ExternalReference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExternalReferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExternalReferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExternalReference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExternalReferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExternalReferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExternalReference).
func (m *ExternalReferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExternalReferenceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.url != nil {
		fields = append(fields, externalreference.FieldURL)
	}
	if m.comment != nil {
		fields = append(fields, externalreference.FieldComment)
	}
	if m.authority != nil {
		fields = append(fields, externalreference.FieldAuthority)
	}
	if m._type != nil {
		fields = append(fields, externalreference.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExternalReferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case externalreference.FieldURL:
		return m.URL()
	case externalreference.FieldComment:
		return m.Comment()
	case externalreference.FieldAuthority:
		return m.Authority()
	case externalreference.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExternalReferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case externalreference.FieldURL:
		return m.OldURL(ctx)
	case externalreference.FieldComment:
		return m.OldComment(ctx)
	case externalreference.FieldAuthority:
		return m.OldAuthority(ctx)
	case externalreference.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown ExternalReference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExternalReferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case externalreference.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case externalreference.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case externalreference.FieldAuthority:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthority(v)
		return nil
	case externalreference.FieldType:
		v, ok := value.(externalreference.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown ExternalReference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExternalReferenceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExternalReferenceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExternalReferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExternalReference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExternalReferenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExternalReferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExternalReferenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExternalReference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExternalReferenceMutation) ResetField(name string) error {
	switch name {
	case externalreference.FieldURL:
		m.ResetURL()
		return nil
	case externalreference.FieldComment:
		m.ResetComment()
		return nil
	case externalreference.FieldAuthority:
		m.ResetAuthority()
		return nil
	case externalreference.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown ExternalReference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExternalReferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.nodes != nil {
		edges = append(edges, externalreference.EdgeNodes)
	}
	if m.hashes != nil {
		edges = append(edges, externalreference.EdgeHashes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExternalReferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case externalreference.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.nodes))
		for id := range m.nodes {
			ids = append(ids, id)
		}
		return ids
	case externalreference.EdgeHashes:
		ids := make([]ent.Value, 0, len(m.hashes))
		for id := range m.hashes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExternalReferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removednodes != nil {
		edges = append(edges, externalreference.EdgeNodes)
	}
	if m.removedhashes != nil {
		edges = append(edges, externalreference.EdgeHashes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExternalReferenceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case externalreference.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.removednodes))
		for id := range m.removednodes {
			ids = append(ids, id)
		}
		return ids
	case externalreference.EdgeHashes:
		ids := make([]ent.Value, 0, len(m.removedhashes))
		for id := range m.removedhashes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExternalReferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednodes {
		edges = append(edges, externalreference.EdgeNodes)
	}
	if m.clearedhashes {
		edges = append(edges, externalreference.EdgeHashes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExternalReferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case externalreference.EdgeNodes:
		return m.clearednodes
	case externalreference.EdgeHashes:
		return m.clearedhashes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExternalReferenceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ExternalReference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExternalReferenceMutation) ResetEdge(name string) error {
	switch name {
	case externalreference.EdgeNodes:
		m.ResetNodes()
		return nil
	case externalreference.EdgeHashes:
		m.ResetHashes()
		return nil
	}
	return fmt.Errorf("unknown ExternalReference edge %s", name)
}

// HashesEntryMutation represents an operation that mutates the HashesEntry nodes in the graph.
type HashesEntryMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	hash_algorithm_type        *hashesentry.HashAlgorithmType
	hash_data                  *string
	clearedFields              map[string]struct{}
	external_references        map[int]struct{}
	removedexternal_references map[int]struct{}
	clearedexternal_references bool
	nodes                      map[string]struct{}
	removednodes               map[string]struct{}
	clearednodes               bool
	done                       bool
	oldValue                   func(context.Context) (*HashesEntry, error)
	predicates                 []predicate.HashesEntry
}

var _ ent.Mutation = (*HashesEntryMutation)(nil)

// hashesentryOption allows management of the mutation configuration using functional options.
type hashesentryOption func(*HashesEntryMutation)

// newHashesEntryMutation creates new mutation for the HashesEntry entity.
func newHashesEntryMutation(c config, op Op, opts ...hashesentryOption) *HashesEntryMutation {
	m := &HashesEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeHashesEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashesEntryID sets the ID field of the mutation.
func withHashesEntryID(id int) hashesentryOption {
	return func(m *HashesEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *HashesEntry
		)
		m.oldValue = func(ctx context.Context) (*HashesEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HashesEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashesEntry sets the old HashesEntry of the mutation.
func withHashesEntry(node *HashesEntry) hashesentryOption {
	return func(m *HashesEntryMutation) {
		m.oldValue = func(context.Context) (*HashesEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashesEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashesEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashesEntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashesEntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HashesEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (m *HashesEntryMutation) SetHashAlgorithmType(hat hashesentry.HashAlgorithmType) {
	m.hash_algorithm_type = &hat
}

// HashAlgorithmType returns the value of the "hash_algorithm_type" field in the mutation.
func (m *HashesEntryMutation) HashAlgorithmType() (r hashesentry.HashAlgorithmType, exists bool) {
	v := m.hash_algorithm_type
	if v == nil {
		return
	}
	return *v, true
}

// OldHashAlgorithmType returns the old "hash_algorithm_type" field's value of the HashesEntry entity.
// If the HashesEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashesEntryMutation) OldHashAlgorithmType(ctx context.Context) (v hashesentry.HashAlgorithmType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashAlgorithmType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashAlgorithmType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashAlgorithmType: %w", err)
	}
	return oldValue.HashAlgorithmType, nil
}

// ResetHashAlgorithmType resets all changes to the "hash_algorithm_type" field.
func (m *HashesEntryMutation) ResetHashAlgorithmType() {
	m.hash_algorithm_type = nil
}

// SetHashData sets the "hash_data" field.
func (m *HashesEntryMutation) SetHashData(s string) {
	m.hash_data = &s
}

// HashData returns the value of the "hash_data" field in the mutation.
func (m *HashesEntryMutation) HashData() (r string, exists bool) {
	v := m.hash_data
	if v == nil {
		return
	}
	return *v, true
}

// OldHashData returns the old "hash_data" field's value of the HashesEntry entity.
// If the HashesEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashesEntryMutation) OldHashData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashData: %w", err)
	}
	return oldValue.HashData, nil
}

// ResetHashData resets all changes to the "hash_data" field.
func (m *HashesEntryMutation) ResetHashData() {
	m.hash_data = nil
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by ids.
func (m *HashesEntryMutation) AddExternalReferenceIDs(ids ...int) {
	if m.external_references == nil {
		m.external_references = make(map[int]struct{})
	}
	for i := range ids {
		m.external_references[ids[i]] = struct{}{}
	}
}

// ClearExternalReferences clears the "external_references" edge to the ExternalReference entity.
func (m *HashesEntryMutation) ClearExternalReferences() {
	m.clearedexternal_references = true
}

// ExternalReferencesCleared reports if the "external_references" edge to the ExternalReference entity was cleared.
func (m *HashesEntryMutation) ExternalReferencesCleared() bool {
	return m.clearedexternal_references
}

// RemoveExternalReferenceIDs removes the "external_references" edge to the ExternalReference entity by IDs.
func (m *HashesEntryMutation) RemoveExternalReferenceIDs(ids ...int) {
	if m.removedexternal_references == nil {
		m.removedexternal_references = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.external_references, ids[i])
		m.removedexternal_references[ids[i]] = struct{}{}
	}
}

// RemovedExternalReferences returns the removed IDs of the "external_references" edge to the ExternalReference entity.
func (m *HashesEntryMutation) RemovedExternalReferencesIDs() (ids []int) {
	for id := range m.removedexternal_references {
		ids = append(ids, id)
	}
	return
}

// ExternalReferencesIDs returns the "external_references" edge IDs in the mutation.
func (m *HashesEntryMutation) ExternalReferencesIDs() (ids []int) {
	for id := range m.external_references {
		ids = append(ids, id)
	}
	return
}

// ResetExternalReferences resets all changes to the "external_references" edge.
func (m *HashesEntryMutation) ResetExternalReferences() {
	m.external_references = nil
	m.clearedexternal_references = false
	m.removedexternal_references = nil
}

// AddNodeIDs adds the "nodes" edge to the Node entity by ids.
func (m *HashesEntryMutation) AddNodeIDs(ids ...string) {
	if m.nodes == nil {
		m.nodes = make(map[string]struct{})
	}
	for i := range ids {
		m.nodes[ids[i]] = struct{}{}
	}
}

// ClearNodes clears the "nodes" edge to the Node entity.
func (m *HashesEntryMutation) ClearNodes() {
	m.clearednodes = true
}

// NodesCleared reports if the "nodes" edge to the Node entity was cleared.
func (m *HashesEntryMutation) NodesCleared() bool {
	return m.clearednodes
}

// RemoveNodeIDs removes the "nodes" edge to the Node entity by IDs.
func (m *HashesEntryMutation) RemoveNodeIDs(ids ...string) {
	if m.removednodes == nil {
		m.removednodes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.nodes, ids[i])
		m.removednodes[ids[i]] = struct{}{}
	}
}

// RemovedNodes returns the removed IDs of the "nodes" edge to the Node entity.
func (m *HashesEntryMutation) RemovedNodesIDs() (ids []string) {
	for id := range m.removednodes {
		ids = append(ids, id)
	}
	return
}

// NodesIDs returns the "nodes" edge IDs in the mutation.
func (m *HashesEntryMutation) NodesIDs() (ids []string) {
	for id := range m.nodes {
		ids = append(ids, id)
	}
	return
}

// ResetNodes resets all changes to the "nodes" edge.
func (m *HashesEntryMutation) ResetNodes() {
	m.nodes = nil
	m.clearednodes = false
	m.removednodes = nil
}

// Where appends a list predicates to the HashesEntryMutation builder.
func (m *HashesEntryMutation) Where(ps ...predicate.HashesEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HashesEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HashesEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HashesEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HashesEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HashesEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HashesEntry).
func (m *HashesEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashesEntryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hash_algorithm_type != nil {
		fields = append(fields, hashesentry.FieldHashAlgorithmType)
	}
	if m.hash_data != nil {
		fields = append(fields, hashesentry.FieldHashData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashesEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hashesentry.FieldHashAlgorithmType:
		return m.HashAlgorithmType()
	case hashesentry.FieldHashData:
		return m.HashData()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashesEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hashesentry.FieldHashAlgorithmType:
		return m.OldHashAlgorithmType(ctx)
	case hashesentry.FieldHashData:
		return m.OldHashData(ctx)
	}
	return nil, fmt.Errorf("unknown HashesEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashesEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hashesentry.FieldHashAlgorithmType:
		v, ok := value.(hashesentry.HashAlgorithmType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashAlgorithmType(v)
		return nil
	case hashesentry.FieldHashData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashData(v)
		return nil
	}
	return fmt.Errorf("unknown HashesEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashesEntryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashesEntryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashesEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HashesEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashesEntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashesEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashesEntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HashesEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashesEntryMutation) ResetField(name string) error {
	switch name {
	case hashesentry.FieldHashAlgorithmType:
		m.ResetHashAlgorithmType()
		return nil
	case hashesentry.FieldHashData:
		m.ResetHashData()
		return nil
	}
	return fmt.Errorf("unknown HashesEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashesEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.external_references != nil {
		edges = append(edges, hashesentry.EdgeExternalReferences)
	}
	if m.nodes != nil {
		edges = append(edges, hashesentry.EdgeNodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashesEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashesentry.EdgeExternalReferences:
		ids := make([]ent.Value, 0, len(m.external_references))
		for id := range m.external_references {
			ids = append(ids, id)
		}
		return ids
	case hashesentry.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.nodes))
		for id := range m.nodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashesEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedexternal_references != nil {
		edges = append(edges, hashesentry.EdgeExternalReferences)
	}
	if m.removednodes != nil {
		edges = append(edges, hashesentry.EdgeNodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashesEntryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hashesentry.EdgeExternalReferences:
		ids := make([]ent.Value, 0, len(m.removedexternal_references))
		for id := range m.removedexternal_references {
			ids = append(ids, id)
		}
		return ids
	case hashesentry.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.removednodes))
		for id := range m.removednodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashesEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexternal_references {
		edges = append(edges, hashesentry.EdgeExternalReferences)
	}
	if m.clearednodes {
		edges = append(edges, hashesentry.EdgeNodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashesEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case hashesentry.EdgeExternalReferences:
		return m.clearedexternal_references
	case hashesentry.EdgeNodes:
		return m.clearednodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashesEntryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown HashesEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashesEntryMutation) ResetEdge(name string) error {
	switch name {
	case hashesentry.EdgeExternalReferences:
		m.ResetExternalReferences()
		return nil
	case hashesentry.EdgeNodes:
		m.ResetNodes()
		return nil
	}
	return fmt.Errorf("unknown HashesEntry edge %s", name)
}

// IdentifiersEntryMutation represents an operation that mutates the IdentifiersEntry nodes in the graph.
type IdentifiersEntryMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	software_identifier_type  *identifiersentry.SoftwareIdentifierType
	software_identifier_value *string
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*IdentifiersEntry, error)
	predicates                []predicate.IdentifiersEntry
}

var _ ent.Mutation = (*IdentifiersEntryMutation)(nil)

// identifiersentryOption allows management of the mutation configuration using functional options.
type identifiersentryOption func(*IdentifiersEntryMutation)

// newIdentifiersEntryMutation creates new mutation for the IdentifiersEntry entity.
func newIdentifiersEntryMutation(c config, op Op, opts ...identifiersentryOption) *IdentifiersEntryMutation {
	m := &IdentifiersEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeIdentifiersEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIdentifiersEntryID sets the ID field of the mutation.
func withIdentifiersEntryID(id int) identifiersentryOption {
	return func(m *IdentifiersEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *IdentifiersEntry
		)
		m.oldValue = func(ctx context.Context) (*IdentifiersEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IdentifiersEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIdentifiersEntry sets the old IdentifiersEntry of the mutation.
func withIdentifiersEntry(node *IdentifiersEntry) identifiersentryOption {
	return func(m *IdentifiersEntryMutation) {
		m.oldValue = func(context.Context) (*IdentifiersEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IdentifiersEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IdentifiersEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IdentifiersEntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IdentifiersEntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IdentifiersEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSoftwareIdentifierType sets the "software_identifier_type" field.
func (m *IdentifiersEntryMutation) SetSoftwareIdentifierType(iit identifiersentry.SoftwareIdentifierType) {
	m.software_identifier_type = &iit
}

// SoftwareIdentifierType returns the value of the "software_identifier_type" field in the mutation.
func (m *IdentifiersEntryMutation) SoftwareIdentifierType() (r identifiersentry.SoftwareIdentifierType, exists bool) {
	v := m.software_identifier_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSoftwareIdentifierType returns the old "software_identifier_type" field's value of the IdentifiersEntry entity.
// If the IdentifiersEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentifiersEntryMutation) OldSoftwareIdentifierType(ctx context.Context) (v identifiersentry.SoftwareIdentifierType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSoftwareIdentifierType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSoftwareIdentifierType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSoftwareIdentifierType: %w", err)
	}
	return oldValue.SoftwareIdentifierType, nil
}

// ResetSoftwareIdentifierType resets all changes to the "software_identifier_type" field.
func (m *IdentifiersEntryMutation) ResetSoftwareIdentifierType() {
	m.software_identifier_type = nil
}

// SetSoftwareIdentifierValue sets the "software_identifier_value" field.
func (m *IdentifiersEntryMutation) SetSoftwareIdentifierValue(s string) {
	m.software_identifier_value = &s
}

// SoftwareIdentifierValue returns the value of the "software_identifier_value" field in the mutation.
func (m *IdentifiersEntryMutation) SoftwareIdentifierValue() (r string, exists bool) {
	v := m.software_identifier_value
	if v == nil {
		return
	}
	return *v, true
}

// OldSoftwareIdentifierValue returns the old "software_identifier_value" field's value of the IdentifiersEntry entity.
// If the IdentifiersEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentifiersEntryMutation) OldSoftwareIdentifierValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSoftwareIdentifierValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSoftwareIdentifierValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSoftwareIdentifierValue: %w", err)
	}
	return oldValue.SoftwareIdentifierValue, nil
}

// ResetSoftwareIdentifierValue resets all changes to the "software_identifier_value" field.
func (m *IdentifiersEntryMutation) ResetSoftwareIdentifierValue() {
	m.software_identifier_value = nil
}

// Where appends a list predicates to the IdentifiersEntryMutation builder.
func (m *IdentifiersEntryMutation) Where(ps ...predicate.IdentifiersEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IdentifiersEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IdentifiersEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IdentifiersEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IdentifiersEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IdentifiersEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IdentifiersEntry).
func (m *IdentifiersEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IdentifiersEntryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.software_identifier_type != nil {
		fields = append(fields, identifiersentry.FieldSoftwareIdentifierType)
	}
	if m.software_identifier_value != nil {
		fields = append(fields, identifiersentry.FieldSoftwareIdentifierValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IdentifiersEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case identifiersentry.FieldSoftwareIdentifierType:
		return m.SoftwareIdentifierType()
	case identifiersentry.FieldSoftwareIdentifierValue:
		return m.SoftwareIdentifierValue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IdentifiersEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case identifiersentry.FieldSoftwareIdentifierType:
		return m.OldSoftwareIdentifierType(ctx)
	case identifiersentry.FieldSoftwareIdentifierValue:
		return m.OldSoftwareIdentifierValue(ctx)
	}
	return nil, fmt.Errorf("unknown IdentifiersEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentifiersEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case identifiersentry.FieldSoftwareIdentifierType:
		v, ok := value.(identifiersentry.SoftwareIdentifierType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSoftwareIdentifierType(v)
		return nil
	case identifiersentry.FieldSoftwareIdentifierValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSoftwareIdentifierValue(v)
		return nil
	}
	return fmt.Errorf("unknown IdentifiersEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IdentifiersEntryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IdentifiersEntryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentifiersEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IdentifiersEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IdentifiersEntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IdentifiersEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IdentifiersEntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IdentifiersEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IdentifiersEntryMutation) ResetField(name string) error {
	switch name {
	case identifiersentry.FieldSoftwareIdentifierType:
		m.ResetSoftwareIdentifierType()
		return nil
	case identifiersentry.FieldSoftwareIdentifierValue:
		m.ResetSoftwareIdentifierValue()
		return nil
	}
	return fmt.Errorf("unknown IdentifiersEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IdentifiersEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IdentifiersEntryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IdentifiersEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IdentifiersEntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IdentifiersEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IdentifiersEntryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IdentifiersEntryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown IdentifiersEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IdentifiersEntryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown IdentifiersEntry edge %s", name)
}

// MetadataMutation represents an operation that mutates the Metadata nodes in the graph.
type MetadataMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	version               *string
	name                  *string
	comment               *string
	clearedFields         map[string]struct{}
	document              *int
	cleareddocument       bool
	tools                 map[int]struct{}
	removedtools          map[int]struct{}
	clearedtools          bool
	authors               map[int]struct{}
	removedauthors        map[int]struct{}
	clearedauthors        bool
	document_types        map[int]struct{}
	removeddocument_types map[int]struct{}
	cleareddocument_types bool
	date                  map[int]struct{}
	removeddate           map[int]struct{}
	cleareddate           bool
	done                  bool
	oldValue              func(context.Context) (*Metadata, error)
	predicates            []predicate.Metadata
}

var _ ent.Mutation = (*MetadataMutation)(nil)

// metadataOption allows management of the mutation configuration using functional options.
type metadataOption func(*MetadataMutation)

// newMetadataMutation creates new mutation for the Metadata entity.
func newMetadataMutation(c config, op Op, opts ...metadataOption) *MetadataMutation {
	m := &MetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetadataID sets the ID field of the mutation.
func withMetadataID(id string) metadataOption {
	return func(m *MetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *Metadata
		)
		m.oldValue = func(ctx context.Context) (*Metadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Metadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMetadata sets the old Metadata of the mutation.
func withMetadata(node *Metadata) metadataOption {
	return func(m *MetadataMutation) {
		m.oldValue = func(context.Context) (*Metadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Metadata entities.
func (m *MetadataMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetadataMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetadataMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Metadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVersion sets the "version" field.
func (m *MetadataMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *MetadataMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *MetadataMutation) ResetVersion() {
	m.version = nil
}

// SetName sets the "name" field.
func (m *MetadataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MetadataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MetadataMutation) ResetName() {
	m.name = nil
}

// SetComment sets the "comment" field.
func (m *MetadataMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *MetadataMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Metadata entity.
// If the Metadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetadataMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *MetadataMutation) ResetComment() {
	m.comment = nil
}

// SetDocumentID sets the "document" edge to the Document entity by id.
func (m *MetadataMutation) SetDocumentID(id int) {
	m.document = &id
}

// ClearDocument clears the "document" edge to the Document entity.
func (m *MetadataMutation) ClearDocument() {
	m.cleareddocument = true
}

// DocumentCleared reports if the "document" edge to the Document entity was cleared.
func (m *MetadataMutation) DocumentCleared() bool {
	return m.cleareddocument
}

// DocumentID returns the "document" edge ID in the mutation.
func (m *MetadataMutation) DocumentID() (id int, exists bool) {
	if m.document != nil {
		return *m.document, true
	}
	return
}

// DocumentIDs returns the "document" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DocumentID instead. It exists only for internal usage by the builders.
func (m *MetadataMutation) DocumentIDs() (ids []int) {
	if id := m.document; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDocument resets all changes to the "document" edge.
func (m *MetadataMutation) ResetDocument() {
	m.document = nil
	m.cleareddocument = false
}

// AddToolIDs adds the "tools" edge to the Tool entity by ids.
func (m *MetadataMutation) AddToolIDs(ids ...int) {
	if m.tools == nil {
		m.tools = make(map[int]struct{})
	}
	for i := range ids {
		m.tools[ids[i]] = struct{}{}
	}
}

// ClearTools clears the "tools" edge to the Tool entity.
func (m *MetadataMutation) ClearTools() {
	m.clearedtools = true
}

// ToolsCleared reports if the "tools" edge to the Tool entity was cleared.
func (m *MetadataMutation) ToolsCleared() bool {
	return m.clearedtools
}

// RemoveToolIDs removes the "tools" edge to the Tool entity by IDs.
func (m *MetadataMutation) RemoveToolIDs(ids ...int) {
	if m.removedtools == nil {
		m.removedtools = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tools, ids[i])
		m.removedtools[ids[i]] = struct{}{}
	}
}

// RemovedTools returns the removed IDs of the "tools" edge to the Tool entity.
func (m *MetadataMutation) RemovedToolsIDs() (ids []int) {
	for id := range m.removedtools {
		ids = append(ids, id)
	}
	return
}

// ToolsIDs returns the "tools" edge IDs in the mutation.
func (m *MetadataMutation) ToolsIDs() (ids []int) {
	for id := range m.tools {
		ids = append(ids, id)
	}
	return
}

// ResetTools resets all changes to the "tools" edge.
func (m *MetadataMutation) ResetTools() {
	m.tools = nil
	m.clearedtools = false
	m.removedtools = nil
}

// AddAuthorIDs adds the "authors" edge to the Person entity by ids.
func (m *MetadataMutation) AddAuthorIDs(ids ...int) {
	if m.authors == nil {
		m.authors = make(map[int]struct{})
	}
	for i := range ids {
		m.authors[ids[i]] = struct{}{}
	}
}

// ClearAuthors clears the "authors" edge to the Person entity.
func (m *MetadataMutation) ClearAuthors() {
	m.clearedauthors = true
}

// AuthorsCleared reports if the "authors" edge to the Person entity was cleared.
func (m *MetadataMutation) AuthorsCleared() bool {
	return m.clearedauthors
}

// RemoveAuthorIDs removes the "authors" edge to the Person entity by IDs.
func (m *MetadataMutation) RemoveAuthorIDs(ids ...int) {
	if m.removedauthors == nil {
		m.removedauthors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.authors, ids[i])
		m.removedauthors[ids[i]] = struct{}{}
	}
}

// RemovedAuthors returns the removed IDs of the "authors" edge to the Person entity.
func (m *MetadataMutation) RemovedAuthorsIDs() (ids []int) {
	for id := range m.removedauthors {
		ids = append(ids, id)
	}
	return
}

// AuthorsIDs returns the "authors" edge IDs in the mutation.
func (m *MetadataMutation) AuthorsIDs() (ids []int) {
	for id := range m.authors {
		ids = append(ids, id)
	}
	return
}

// ResetAuthors resets all changes to the "authors" edge.
func (m *MetadataMutation) ResetAuthors() {
	m.authors = nil
	m.clearedauthors = false
	m.removedauthors = nil
}

// AddDocumentTypeIDs adds the "document_types" edge to the DocumentType entity by ids.
func (m *MetadataMutation) AddDocumentTypeIDs(ids ...int) {
	if m.document_types == nil {
		m.document_types = make(map[int]struct{})
	}
	for i := range ids {
		m.document_types[ids[i]] = struct{}{}
	}
}

// ClearDocumentTypes clears the "document_types" edge to the DocumentType entity.
func (m *MetadataMutation) ClearDocumentTypes() {
	m.cleareddocument_types = true
}

// DocumentTypesCleared reports if the "document_types" edge to the DocumentType entity was cleared.
func (m *MetadataMutation) DocumentTypesCleared() bool {
	return m.cleareddocument_types
}

// RemoveDocumentTypeIDs removes the "document_types" edge to the DocumentType entity by IDs.
func (m *MetadataMutation) RemoveDocumentTypeIDs(ids ...int) {
	if m.removeddocument_types == nil {
		m.removeddocument_types = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.document_types, ids[i])
		m.removeddocument_types[ids[i]] = struct{}{}
	}
}

// RemovedDocumentTypes returns the removed IDs of the "document_types" edge to the DocumentType entity.
func (m *MetadataMutation) RemovedDocumentTypesIDs() (ids []int) {
	for id := range m.removeddocument_types {
		ids = append(ids, id)
	}
	return
}

// DocumentTypesIDs returns the "document_types" edge IDs in the mutation.
func (m *MetadataMutation) DocumentTypesIDs() (ids []int) {
	for id := range m.document_types {
		ids = append(ids, id)
	}
	return
}

// ResetDocumentTypes resets all changes to the "document_types" edge.
func (m *MetadataMutation) ResetDocumentTypes() {
	m.document_types = nil
	m.cleareddocument_types = false
	m.removeddocument_types = nil
}

// AddDateIDs adds the "date" edge to the Timestamp entity by ids.
func (m *MetadataMutation) AddDateIDs(ids ...int) {
	if m.date == nil {
		m.date = make(map[int]struct{})
	}
	for i := range ids {
		m.date[ids[i]] = struct{}{}
	}
}

// ClearDate clears the "date" edge to the Timestamp entity.
func (m *MetadataMutation) ClearDate() {
	m.cleareddate = true
}

// DateCleared reports if the "date" edge to the Timestamp entity was cleared.
func (m *MetadataMutation) DateCleared() bool {
	return m.cleareddate
}

// RemoveDateIDs removes the "date" edge to the Timestamp entity by IDs.
func (m *MetadataMutation) RemoveDateIDs(ids ...int) {
	if m.removeddate == nil {
		m.removeddate = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.date, ids[i])
		m.removeddate[ids[i]] = struct{}{}
	}
}

// RemovedDate returns the removed IDs of the "date" edge to the Timestamp entity.
func (m *MetadataMutation) RemovedDateIDs() (ids []int) {
	for id := range m.removeddate {
		ids = append(ids, id)
	}
	return
}

// DateIDs returns the "date" edge IDs in the mutation.
func (m *MetadataMutation) DateIDs() (ids []int) {
	for id := range m.date {
		ids = append(ids, id)
	}
	return
}

// ResetDate resets all changes to the "date" edge.
func (m *MetadataMutation) ResetDate() {
	m.date = nil
	m.cleareddate = false
	m.removeddate = nil
}

// Where appends a list predicates to the MetadataMutation builder.
func (m *MetadataMutation) Where(ps ...predicate.Metadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Metadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Metadata).
func (m *MetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetadataMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.version != nil {
		fields = append(fields, metadata.FieldVersion)
	}
	if m.name != nil {
		fields = append(fields, metadata.FieldName)
	}
	if m.comment != nil {
		fields = append(fields, metadata.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case metadata.FieldVersion:
		return m.Version()
	case metadata.FieldName:
		return m.Name()
	case metadata.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case metadata.FieldVersion:
		return m.OldVersion(ctx)
	case metadata.FieldName:
		return m.OldName(ctx)
	case metadata.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown Metadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case metadata.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case metadata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case metadata.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetadataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetadataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Metadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Metadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetadataMutation) ResetField(name string) error {
	switch name {
	case metadata.FieldVersion:
		m.ResetVersion()
		return nil
	case metadata.FieldName:
		m.ResetName()
		return nil
	case metadata.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown Metadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.document != nil {
		edges = append(edges, metadata.EdgeDocument)
	}
	if m.tools != nil {
		edges = append(edges, metadata.EdgeTools)
	}
	if m.authors != nil {
		edges = append(edges, metadata.EdgeAuthors)
	}
	if m.document_types != nil {
		edges = append(edges, metadata.EdgeDocumentTypes)
	}
	if m.date != nil {
		edges = append(edges, metadata.EdgeDate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetadataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case metadata.EdgeDocument:
		if id := m.document; id != nil {
			return []ent.Value{*id}
		}
	case metadata.EdgeTools:
		ids := make([]ent.Value, 0, len(m.tools))
		for id := range m.tools {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeAuthors:
		ids := make([]ent.Value, 0, len(m.authors))
		for id := range m.authors {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeDocumentTypes:
		ids := make([]ent.Value, 0, len(m.document_types))
		for id := range m.document_types {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeDate:
		ids := make([]ent.Value, 0, len(m.date))
		for id := range m.date {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedtools != nil {
		edges = append(edges, metadata.EdgeTools)
	}
	if m.removedauthors != nil {
		edges = append(edges, metadata.EdgeAuthors)
	}
	if m.removeddocument_types != nil {
		edges = append(edges, metadata.EdgeDocumentTypes)
	}
	if m.removeddate != nil {
		edges = append(edges, metadata.EdgeDate)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetadataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case metadata.EdgeTools:
		ids := make([]ent.Value, 0, len(m.removedtools))
		for id := range m.removedtools {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeAuthors:
		ids := make([]ent.Value, 0, len(m.removedauthors))
		for id := range m.removedauthors {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeDocumentTypes:
		ids := make([]ent.Value, 0, len(m.removeddocument_types))
		for id := range m.removeddocument_types {
			ids = append(ids, id)
		}
		return ids
	case metadata.EdgeDate:
		ids := make([]ent.Value, 0, len(m.removeddate))
		for id := range m.removeddate {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareddocument {
		edges = append(edges, metadata.EdgeDocument)
	}
	if m.clearedtools {
		edges = append(edges, metadata.EdgeTools)
	}
	if m.clearedauthors {
		edges = append(edges, metadata.EdgeAuthors)
	}
	if m.cleareddocument_types {
		edges = append(edges, metadata.EdgeDocumentTypes)
	}
	if m.cleareddate {
		edges = append(edges, metadata.EdgeDate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetadataMutation) EdgeCleared(name string) bool {
	switch name {
	case metadata.EdgeDocument:
		return m.cleareddocument
	case metadata.EdgeTools:
		return m.clearedtools
	case metadata.EdgeAuthors:
		return m.clearedauthors
	case metadata.EdgeDocumentTypes:
		return m.cleareddocument_types
	case metadata.EdgeDate:
		return m.cleareddate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetadataMutation) ClearEdge(name string) error {
	switch name {
	case metadata.EdgeDocument:
		m.ClearDocument()
		return nil
	}
	return fmt.Errorf("unknown Metadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetadataMutation) ResetEdge(name string) error {
	switch name {
	case metadata.EdgeDocument:
		m.ResetDocument()
		return nil
	case metadata.EdgeTools:
		m.ResetTools()
		return nil
	case metadata.EdgeAuthors:
		m.ResetAuthors()
		return nil
	case metadata.EdgeDocumentTypes:
		m.ResetDocumentTypes()
		return nil
	case metadata.EdgeDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Metadata edge %s", name)
}

// NodeMutation represents an operation that mutates the Node nodes in the graph.
type NodeMutation struct {
	config
	op                         Op
	typ                        string
	id                         *string
	_type                      *node.Type
	name                       *string
	version                    *string
	file_name                  *string
	url_home                   *string
	url_download               *string
	licenses                   *string
	license_concluded          *string
	license_comments           *string
	copyright                  *string
	source_info                *string
	comment                    *string
	summary                    *string
	description                *string
	attribution                *string
	file_types                 *string
	primary_purpose            *node.PrimaryPurpose
	clearedFields              map[string]struct{}
	node_list                  *int
	clearednode_list           bool
	suppliers                  map[int]struct{}
	removedsuppliers           map[int]struct{}
	clearedsuppliers           bool
	originators                map[int]struct{}
	removedoriginators         map[int]struct{}
	clearedoriginators         bool
	external_references        map[int]struct{}
	removedexternal_references map[int]struct{}
	clearedexternal_references bool
	identifiers                map[int]struct{}
	removedidentifiers         map[int]struct{}
	clearedidentifiers         bool
	hashes                     map[int]struct{}
	removedhashes              map[int]struct{}
	clearedhashes              bool
	release_date               map[int]struct{}
	removedrelease_date        map[int]struct{}
	clearedrelease_date        bool
	build_date                 map[int]struct{}
	removedbuild_date          map[int]struct{}
	clearedbuild_date          bool
	valid_until_date           map[int]struct{}
	removedvalid_until_date    map[int]struct{}
	clearedvalid_until_date    bool
	done                       bool
	oldValue                   func(context.Context) (*Node, error)
	predicates                 []predicate.Node
}

var _ ent.Mutation = (*NodeMutation)(nil)

// nodeOption allows management of the mutation configuration using functional options.
type nodeOption func(*NodeMutation)

// newNodeMutation creates new mutation for the Node entity.
func newNodeMutation(c config, op Op, opts ...nodeOption) *NodeMutation {
	m := &NodeMutation{
		config:        c,
		op:            op,
		typ:           TypeNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeID sets the ID field of the mutation.
func withNodeID(id string) nodeOption {
	return func(m *NodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Node
		)
		m.oldValue = func(ctx context.Context) (*Node, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Node.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNode sets the old Node of the mutation.
func withNode(node *Node) nodeOption {
	return func(m *NodeMutation) {
		m.oldValue = func(context.Context) (*Node, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Node entities.
func (m *NodeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Node.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *NodeMutation) SetType(n node.Type) {
	m._type = &n
}

// GetType returns the value of the "type" field in the mutation.
func (m *NodeMutation) GetType() (r node.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldType(ctx context.Context) (v node.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NodeMutation) ResetType() {
	m._type = nil
}

// SetName sets the "name" field.
func (m *NodeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NodeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NodeMutation) ResetName() {
	m.name = nil
}

// SetVersion sets the "version" field.
func (m *NodeMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *NodeMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *NodeMutation) ResetVersion() {
	m.version = nil
}

// SetFileName sets the "file_name" field.
func (m *NodeMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *NodeMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *NodeMutation) ResetFileName() {
	m.file_name = nil
}

// SetURLHome sets the "url_home" field.
func (m *NodeMutation) SetURLHome(s string) {
	m.url_home = &s
}

// URLHome returns the value of the "url_home" field in the mutation.
func (m *NodeMutation) URLHome() (r string, exists bool) {
	v := m.url_home
	if v == nil {
		return
	}
	return *v, true
}

// OldURLHome returns the old "url_home" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldURLHome(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLHome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLHome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLHome: %w", err)
	}
	return oldValue.URLHome, nil
}

// ResetURLHome resets all changes to the "url_home" field.
func (m *NodeMutation) ResetURLHome() {
	m.url_home = nil
}

// SetURLDownload sets the "url_download" field.
func (m *NodeMutation) SetURLDownload(s string) {
	m.url_download = &s
}

// URLDownload returns the value of the "url_download" field in the mutation.
func (m *NodeMutation) URLDownload() (r string, exists bool) {
	v := m.url_download
	if v == nil {
		return
	}
	return *v, true
}

// OldURLDownload returns the old "url_download" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldURLDownload(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLDownload: %w", err)
	}
	return oldValue.URLDownload, nil
}

// ResetURLDownload resets all changes to the "url_download" field.
func (m *NodeMutation) ResetURLDownload() {
	m.url_download = nil
}

// SetLicenses sets the "licenses" field.
func (m *NodeMutation) SetLicenses(s string) {
	m.licenses = &s
}

// Licenses returns the value of the "licenses" field in the mutation.
func (m *NodeMutation) Licenses() (r string, exists bool) {
	v := m.licenses
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenses returns the old "licenses" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldLicenses(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenses: %w", err)
	}
	return oldValue.Licenses, nil
}

// ResetLicenses resets all changes to the "licenses" field.
func (m *NodeMutation) ResetLicenses() {
	m.licenses = nil
}

// SetLicenseConcluded sets the "license_concluded" field.
func (m *NodeMutation) SetLicenseConcluded(s string) {
	m.license_concluded = &s
}

// LicenseConcluded returns the value of the "license_concluded" field in the mutation.
func (m *NodeMutation) LicenseConcluded() (r string, exists bool) {
	v := m.license_concluded
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseConcluded returns the old "license_concluded" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldLicenseConcluded(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseConcluded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseConcluded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseConcluded: %w", err)
	}
	return oldValue.LicenseConcluded, nil
}

// ResetLicenseConcluded resets all changes to the "license_concluded" field.
func (m *NodeMutation) ResetLicenseConcluded() {
	m.license_concluded = nil
}

// SetLicenseComments sets the "license_comments" field.
func (m *NodeMutation) SetLicenseComments(s string) {
	m.license_comments = &s
}

// LicenseComments returns the value of the "license_comments" field in the mutation.
func (m *NodeMutation) LicenseComments() (r string, exists bool) {
	v := m.license_comments
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseComments returns the old "license_comments" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldLicenseComments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseComments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseComments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseComments: %w", err)
	}
	return oldValue.LicenseComments, nil
}

// ResetLicenseComments resets all changes to the "license_comments" field.
func (m *NodeMutation) ResetLicenseComments() {
	m.license_comments = nil
}

// SetCopyright sets the "copyright" field.
func (m *NodeMutation) SetCopyright(s string) {
	m.copyright = &s
}

// Copyright returns the value of the "copyright" field in the mutation.
func (m *NodeMutation) Copyright() (r string, exists bool) {
	v := m.copyright
	if v == nil {
		return
	}
	return *v, true
}

// OldCopyright returns the old "copyright" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldCopyright(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCopyright is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCopyright requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCopyright: %w", err)
	}
	return oldValue.Copyright, nil
}

// ResetCopyright resets all changes to the "copyright" field.
func (m *NodeMutation) ResetCopyright() {
	m.copyright = nil
}

// SetSourceInfo sets the "source_info" field.
func (m *NodeMutation) SetSourceInfo(s string) {
	m.source_info = &s
}

// SourceInfo returns the value of the "source_info" field in the mutation.
func (m *NodeMutation) SourceInfo() (r string, exists bool) {
	v := m.source_info
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceInfo returns the old "source_info" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldSourceInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceInfo: %w", err)
	}
	return oldValue.SourceInfo, nil
}

// ResetSourceInfo resets all changes to the "source_info" field.
func (m *NodeMutation) ResetSourceInfo() {
	m.source_info = nil
}

// SetComment sets the "comment" field.
func (m *NodeMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *NodeMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *NodeMutation) ResetComment() {
	m.comment = nil
}

// SetSummary sets the "summary" field.
func (m *NodeMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *NodeMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *NodeMutation) ResetSummary() {
	m.summary = nil
}

// SetDescription sets the "description" field.
func (m *NodeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *NodeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *NodeMutation) ResetDescription() {
	m.description = nil
}

// SetAttribution sets the "attribution" field.
func (m *NodeMutation) SetAttribution(s string) {
	m.attribution = &s
}

// Attribution returns the value of the "attribution" field in the mutation.
func (m *NodeMutation) Attribution() (r string, exists bool) {
	v := m.attribution
	if v == nil {
		return
	}
	return *v, true
}

// OldAttribution returns the old "attribution" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldAttribution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttribution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttribution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttribution: %w", err)
	}
	return oldValue.Attribution, nil
}

// ResetAttribution resets all changes to the "attribution" field.
func (m *NodeMutation) ResetAttribution() {
	m.attribution = nil
}

// SetFileTypes sets the "file_types" field.
func (m *NodeMutation) SetFileTypes(s string) {
	m.file_types = &s
}

// FileTypes returns the value of the "file_types" field in the mutation.
func (m *NodeMutation) FileTypes() (r string, exists bool) {
	v := m.file_types
	if v == nil {
		return
	}
	return *v, true
}

// OldFileTypes returns the old "file_types" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldFileTypes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileTypes: %w", err)
	}
	return oldValue.FileTypes, nil
}

// ResetFileTypes resets all changes to the "file_types" field.
func (m *NodeMutation) ResetFileTypes() {
	m.file_types = nil
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (m *NodeMutation) SetPrimaryPurpose(np node.PrimaryPurpose) {
	m.primary_purpose = &np
}

// PrimaryPurpose returns the value of the "primary_purpose" field in the mutation.
func (m *NodeMutation) PrimaryPurpose() (r node.PrimaryPurpose, exists bool) {
	v := m.primary_purpose
	if v == nil {
		return
	}
	return *v, true
}

// OldPrimaryPurpose returns the old "primary_purpose" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldPrimaryPurpose(ctx context.Context) (v node.PrimaryPurpose, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrimaryPurpose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrimaryPurpose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrimaryPurpose: %w", err)
	}
	return oldValue.PrimaryPurpose, nil
}

// ResetPrimaryPurpose resets all changes to the "primary_purpose" field.
func (m *NodeMutation) ResetPrimaryPurpose() {
	m.primary_purpose = nil
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by id.
func (m *NodeMutation) SetNodeListID(id int) {
	m.node_list = &id
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (m *NodeMutation) ClearNodeList() {
	m.clearednode_list = true
}

// NodeListCleared reports if the "node_list" edge to the NodeList entity was cleared.
func (m *NodeMutation) NodeListCleared() bool {
	return m.clearednode_list
}

// NodeListID returns the "node_list" edge ID in the mutation.
func (m *NodeMutation) NodeListID() (id int, exists bool) {
	if m.node_list != nil {
		return *m.node_list, true
	}
	return
}

// NodeListIDs returns the "node_list" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeListID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) NodeListIDs() (ids []int) {
	if id := m.node_list; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNodeList resets all changes to the "node_list" edge.
func (m *NodeMutation) ResetNodeList() {
	m.node_list = nil
	m.clearednode_list = false
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by ids.
func (m *NodeMutation) AddSupplierIDs(ids ...int) {
	if m.suppliers == nil {
		m.suppliers = make(map[int]struct{})
	}
	for i := range ids {
		m.suppliers[ids[i]] = struct{}{}
	}
}

// ClearSuppliers clears the "suppliers" edge to the Person entity.
func (m *NodeMutation) ClearSuppliers() {
	m.clearedsuppliers = true
}

// SuppliersCleared reports if the "suppliers" edge to the Person entity was cleared.
func (m *NodeMutation) SuppliersCleared() bool {
	return m.clearedsuppliers
}

// RemoveSupplierIDs removes the "suppliers" edge to the Person entity by IDs.
func (m *NodeMutation) RemoveSupplierIDs(ids ...int) {
	if m.removedsuppliers == nil {
		m.removedsuppliers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.suppliers, ids[i])
		m.removedsuppliers[ids[i]] = struct{}{}
	}
}

// RemovedSuppliers returns the removed IDs of the "suppliers" edge to the Person entity.
func (m *NodeMutation) RemovedSuppliersIDs() (ids []int) {
	for id := range m.removedsuppliers {
		ids = append(ids, id)
	}
	return
}

// SuppliersIDs returns the "suppliers" edge IDs in the mutation.
func (m *NodeMutation) SuppliersIDs() (ids []int) {
	for id := range m.suppliers {
		ids = append(ids, id)
	}
	return
}

// ResetSuppliers resets all changes to the "suppliers" edge.
func (m *NodeMutation) ResetSuppliers() {
	m.suppliers = nil
	m.clearedsuppliers = false
	m.removedsuppliers = nil
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by ids.
func (m *NodeMutation) AddOriginatorIDs(ids ...int) {
	if m.originators == nil {
		m.originators = make(map[int]struct{})
	}
	for i := range ids {
		m.originators[ids[i]] = struct{}{}
	}
}

// ClearOriginators clears the "originators" edge to the Person entity.
func (m *NodeMutation) ClearOriginators() {
	m.clearedoriginators = true
}

// OriginatorsCleared reports if the "originators" edge to the Person entity was cleared.
func (m *NodeMutation) OriginatorsCleared() bool {
	return m.clearedoriginators
}

// RemoveOriginatorIDs removes the "originators" edge to the Person entity by IDs.
func (m *NodeMutation) RemoveOriginatorIDs(ids ...int) {
	if m.removedoriginators == nil {
		m.removedoriginators = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.originators, ids[i])
		m.removedoriginators[ids[i]] = struct{}{}
	}
}

// RemovedOriginators returns the removed IDs of the "originators" edge to the Person entity.
func (m *NodeMutation) RemovedOriginatorsIDs() (ids []int) {
	for id := range m.removedoriginators {
		ids = append(ids, id)
	}
	return
}

// OriginatorsIDs returns the "originators" edge IDs in the mutation.
func (m *NodeMutation) OriginatorsIDs() (ids []int) {
	for id := range m.originators {
		ids = append(ids, id)
	}
	return
}

// ResetOriginators resets all changes to the "originators" edge.
func (m *NodeMutation) ResetOriginators() {
	m.originators = nil
	m.clearedoriginators = false
	m.removedoriginators = nil
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by ids.
func (m *NodeMutation) AddExternalReferenceIDs(ids ...int) {
	if m.external_references == nil {
		m.external_references = make(map[int]struct{})
	}
	for i := range ids {
		m.external_references[ids[i]] = struct{}{}
	}
}

// ClearExternalReferences clears the "external_references" edge to the ExternalReference entity.
func (m *NodeMutation) ClearExternalReferences() {
	m.clearedexternal_references = true
}

// ExternalReferencesCleared reports if the "external_references" edge to the ExternalReference entity was cleared.
func (m *NodeMutation) ExternalReferencesCleared() bool {
	return m.clearedexternal_references
}

// RemoveExternalReferenceIDs removes the "external_references" edge to the ExternalReference entity by IDs.
func (m *NodeMutation) RemoveExternalReferenceIDs(ids ...int) {
	if m.removedexternal_references == nil {
		m.removedexternal_references = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.external_references, ids[i])
		m.removedexternal_references[ids[i]] = struct{}{}
	}
}

// RemovedExternalReferences returns the removed IDs of the "external_references" edge to the ExternalReference entity.
func (m *NodeMutation) RemovedExternalReferencesIDs() (ids []int) {
	for id := range m.removedexternal_references {
		ids = append(ids, id)
	}
	return
}

// ExternalReferencesIDs returns the "external_references" edge IDs in the mutation.
func (m *NodeMutation) ExternalReferencesIDs() (ids []int) {
	for id := range m.external_references {
		ids = append(ids, id)
	}
	return
}

// ResetExternalReferences resets all changes to the "external_references" edge.
func (m *NodeMutation) ResetExternalReferences() {
	m.external_references = nil
	m.clearedexternal_references = false
	m.removedexternal_references = nil
}

// AddIdentifierIDs adds the "identifiers" edge to the IdentifiersEntry entity by ids.
func (m *NodeMutation) AddIdentifierIDs(ids ...int) {
	if m.identifiers == nil {
		m.identifiers = make(map[int]struct{})
	}
	for i := range ids {
		m.identifiers[ids[i]] = struct{}{}
	}
}

// ClearIdentifiers clears the "identifiers" edge to the IdentifiersEntry entity.
func (m *NodeMutation) ClearIdentifiers() {
	m.clearedidentifiers = true
}

// IdentifiersCleared reports if the "identifiers" edge to the IdentifiersEntry entity was cleared.
func (m *NodeMutation) IdentifiersCleared() bool {
	return m.clearedidentifiers
}

// RemoveIdentifierIDs removes the "identifiers" edge to the IdentifiersEntry entity by IDs.
func (m *NodeMutation) RemoveIdentifierIDs(ids ...int) {
	if m.removedidentifiers == nil {
		m.removedidentifiers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.identifiers, ids[i])
		m.removedidentifiers[ids[i]] = struct{}{}
	}
}

// RemovedIdentifiers returns the removed IDs of the "identifiers" edge to the IdentifiersEntry entity.
func (m *NodeMutation) RemovedIdentifiersIDs() (ids []int) {
	for id := range m.removedidentifiers {
		ids = append(ids, id)
	}
	return
}

// IdentifiersIDs returns the "identifiers" edge IDs in the mutation.
func (m *NodeMutation) IdentifiersIDs() (ids []int) {
	for id := range m.identifiers {
		ids = append(ids, id)
	}
	return
}

// ResetIdentifiers resets all changes to the "identifiers" edge.
func (m *NodeMutation) ResetIdentifiers() {
	m.identifiers = nil
	m.clearedidentifiers = false
	m.removedidentifiers = nil
}

// AddHashIDs adds the "hashes" edge to the HashesEntry entity by ids.
func (m *NodeMutation) AddHashIDs(ids ...int) {
	if m.hashes == nil {
		m.hashes = make(map[int]struct{})
	}
	for i := range ids {
		m.hashes[ids[i]] = struct{}{}
	}
}

// ClearHashes clears the "hashes" edge to the HashesEntry entity.
func (m *NodeMutation) ClearHashes() {
	m.clearedhashes = true
}

// HashesCleared reports if the "hashes" edge to the HashesEntry entity was cleared.
func (m *NodeMutation) HashesCleared() bool {
	return m.clearedhashes
}

// RemoveHashIDs removes the "hashes" edge to the HashesEntry entity by IDs.
func (m *NodeMutation) RemoveHashIDs(ids ...int) {
	if m.removedhashes == nil {
		m.removedhashes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hashes, ids[i])
		m.removedhashes[ids[i]] = struct{}{}
	}
}

// RemovedHashes returns the removed IDs of the "hashes" edge to the HashesEntry entity.
func (m *NodeMutation) RemovedHashesIDs() (ids []int) {
	for id := range m.removedhashes {
		ids = append(ids, id)
	}
	return
}

// HashesIDs returns the "hashes" edge IDs in the mutation.
func (m *NodeMutation) HashesIDs() (ids []int) {
	for id := range m.hashes {
		ids = append(ids, id)
	}
	return
}

// ResetHashes resets all changes to the "hashes" edge.
func (m *NodeMutation) ResetHashes() {
	m.hashes = nil
	m.clearedhashes = false
	m.removedhashes = nil
}

// AddReleaseDateIDs adds the "release_date" edge to the Timestamp entity by ids.
func (m *NodeMutation) AddReleaseDateIDs(ids ...int) {
	if m.release_date == nil {
		m.release_date = make(map[int]struct{})
	}
	for i := range ids {
		m.release_date[ids[i]] = struct{}{}
	}
}

// ClearReleaseDate clears the "release_date" edge to the Timestamp entity.
func (m *NodeMutation) ClearReleaseDate() {
	m.clearedrelease_date = true
}

// ReleaseDateCleared reports if the "release_date" edge to the Timestamp entity was cleared.
func (m *NodeMutation) ReleaseDateCleared() bool {
	return m.clearedrelease_date
}

// RemoveReleaseDateIDs removes the "release_date" edge to the Timestamp entity by IDs.
func (m *NodeMutation) RemoveReleaseDateIDs(ids ...int) {
	if m.removedrelease_date == nil {
		m.removedrelease_date = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.release_date, ids[i])
		m.removedrelease_date[ids[i]] = struct{}{}
	}
}

// RemovedReleaseDate returns the removed IDs of the "release_date" edge to the Timestamp entity.
func (m *NodeMutation) RemovedReleaseDateIDs() (ids []int) {
	for id := range m.removedrelease_date {
		ids = append(ids, id)
	}
	return
}

// ReleaseDateIDs returns the "release_date" edge IDs in the mutation.
func (m *NodeMutation) ReleaseDateIDs() (ids []int) {
	for id := range m.release_date {
		ids = append(ids, id)
	}
	return
}

// ResetReleaseDate resets all changes to the "release_date" edge.
func (m *NodeMutation) ResetReleaseDate() {
	m.release_date = nil
	m.clearedrelease_date = false
	m.removedrelease_date = nil
}

// AddBuildDateIDs adds the "build_date" edge to the Timestamp entity by ids.
func (m *NodeMutation) AddBuildDateIDs(ids ...int) {
	if m.build_date == nil {
		m.build_date = make(map[int]struct{})
	}
	for i := range ids {
		m.build_date[ids[i]] = struct{}{}
	}
}

// ClearBuildDate clears the "build_date" edge to the Timestamp entity.
func (m *NodeMutation) ClearBuildDate() {
	m.clearedbuild_date = true
}

// BuildDateCleared reports if the "build_date" edge to the Timestamp entity was cleared.
func (m *NodeMutation) BuildDateCleared() bool {
	return m.clearedbuild_date
}

// RemoveBuildDateIDs removes the "build_date" edge to the Timestamp entity by IDs.
func (m *NodeMutation) RemoveBuildDateIDs(ids ...int) {
	if m.removedbuild_date == nil {
		m.removedbuild_date = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.build_date, ids[i])
		m.removedbuild_date[ids[i]] = struct{}{}
	}
}

// RemovedBuildDate returns the removed IDs of the "build_date" edge to the Timestamp entity.
func (m *NodeMutation) RemovedBuildDateIDs() (ids []int) {
	for id := range m.removedbuild_date {
		ids = append(ids, id)
	}
	return
}

// BuildDateIDs returns the "build_date" edge IDs in the mutation.
func (m *NodeMutation) BuildDateIDs() (ids []int) {
	for id := range m.build_date {
		ids = append(ids, id)
	}
	return
}

// ResetBuildDate resets all changes to the "build_date" edge.
func (m *NodeMutation) ResetBuildDate() {
	m.build_date = nil
	m.clearedbuild_date = false
	m.removedbuild_date = nil
}

// AddValidUntilDateIDs adds the "valid_until_date" edge to the Timestamp entity by ids.
func (m *NodeMutation) AddValidUntilDateIDs(ids ...int) {
	if m.valid_until_date == nil {
		m.valid_until_date = make(map[int]struct{})
	}
	for i := range ids {
		m.valid_until_date[ids[i]] = struct{}{}
	}
}

// ClearValidUntilDate clears the "valid_until_date" edge to the Timestamp entity.
func (m *NodeMutation) ClearValidUntilDate() {
	m.clearedvalid_until_date = true
}

// ValidUntilDateCleared reports if the "valid_until_date" edge to the Timestamp entity was cleared.
func (m *NodeMutation) ValidUntilDateCleared() bool {
	return m.clearedvalid_until_date
}

// RemoveValidUntilDateIDs removes the "valid_until_date" edge to the Timestamp entity by IDs.
func (m *NodeMutation) RemoveValidUntilDateIDs(ids ...int) {
	if m.removedvalid_until_date == nil {
		m.removedvalid_until_date = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.valid_until_date, ids[i])
		m.removedvalid_until_date[ids[i]] = struct{}{}
	}
}

// RemovedValidUntilDate returns the removed IDs of the "valid_until_date" edge to the Timestamp entity.
func (m *NodeMutation) RemovedValidUntilDateIDs() (ids []int) {
	for id := range m.removedvalid_until_date {
		ids = append(ids, id)
	}
	return
}

// ValidUntilDateIDs returns the "valid_until_date" edge IDs in the mutation.
func (m *NodeMutation) ValidUntilDateIDs() (ids []int) {
	for id := range m.valid_until_date {
		ids = append(ids, id)
	}
	return
}

// ResetValidUntilDate resets all changes to the "valid_until_date" edge.
func (m *NodeMutation) ResetValidUntilDate() {
	m.valid_until_date = nil
	m.clearedvalid_until_date = false
	m.removedvalid_until_date = nil
}

// Where appends a list predicates to the NodeMutation builder.
func (m *NodeMutation) Where(ps ...predicate.Node) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Node, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Node).
func (m *NodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m._type != nil {
		fields = append(fields, node.FieldType)
	}
	if m.name != nil {
		fields = append(fields, node.FieldName)
	}
	if m.version != nil {
		fields = append(fields, node.FieldVersion)
	}
	if m.file_name != nil {
		fields = append(fields, node.FieldFileName)
	}
	if m.url_home != nil {
		fields = append(fields, node.FieldURLHome)
	}
	if m.url_download != nil {
		fields = append(fields, node.FieldURLDownload)
	}
	if m.licenses != nil {
		fields = append(fields, node.FieldLicenses)
	}
	if m.license_concluded != nil {
		fields = append(fields, node.FieldLicenseConcluded)
	}
	if m.license_comments != nil {
		fields = append(fields, node.FieldLicenseComments)
	}
	if m.copyright != nil {
		fields = append(fields, node.FieldCopyright)
	}
	if m.source_info != nil {
		fields = append(fields, node.FieldSourceInfo)
	}
	if m.comment != nil {
		fields = append(fields, node.FieldComment)
	}
	if m.summary != nil {
		fields = append(fields, node.FieldSummary)
	}
	if m.description != nil {
		fields = append(fields, node.FieldDescription)
	}
	if m.attribution != nil {
		fields = append(fields, node.FieldAttribution)
	}
	if m.file_types != nil {
		fields = append(fields, node.FieldFileTypes)
	}
	if m.primary_purpose != nil {
		fields = append(fields, node.FieldPrimaryPurpose)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case node.FieldType:
		return m.GetType()
	case node.FieldName:
		return m.Name()
	case node.FieldVersion:
		return m.Version()
	case node.FieldFileName:
		return m.FileName()
	case node.FieldURLHome:
		return m.URLHome()
	case node.FieldURLDownload:
		return m.URLDownload()
	case node.FieldLicenses:
		return m.Licenses()
	case node.FieldLicenseConcluded:
		return m.LicenseConcluded()
	case node.FieldLicenseComments:
		return m.LicenseComments()
	case node.FieldCopyright:
		return m.Copyright()
	case node.FieldSourceInfo:
		return m.SourceInfo()
	case node.FieldComment:
		return m.Comment()
	case node.FieldSummary:
		return m.Summary()
	case node.FieldDescription:
		return m.Description()
	case node.FieldAttribution:
		return m.Attribution()
	case node.FieldFileTypes:
		return m.FileTypes()
	case node.FieldPrimaryPurpose:
		return m.PrimaryPurpose()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case node.FieldType:
		return m.OldType(ctx)
	case node.FieldName:
		return m.OldName(ctx)
	case node.FieldVersion:
		return m.OldVersion(ctx)
	case node.FieldFileName:
		return m.OldFileName(ctx)
	case node.FieldURLHome:
		return m.OldURLHome(ctx)
	case node.FieldURLDownload:
		return m.OldURLDownload(ctx)
	case node.FieldLicenses:
		return m.OldLicenses(ctx)
	case node.FieldLicenseConcluded:
		return m.OldLicenseConcluded(ctx)
	case node.FieldLicenseComments:
		return m.OldLicenseComments(ctx)
	case node.FieldCopyright:
		return m.OldCopyright(ctx)
	case node.FieldSourceInfo:
		return m.OldSourceInfo(ctx)
	case node.FieldComment:
		return m.OldComment(ctx)
	case node.FieldSummary:
		return m.OldSummary(ctx)
	case node.FieldDescription:
		return m.OldDescription(ctx)
	case node.FieldAttribution:
		return m.OldAttribution(ctx)
	case node.FieldFileTypes:
		return m.OldFileTypes(ctx)
	case node.FieldPrimaryPurpose:
		return m.OldPrimaryPurpose(ctx)
	}
	return nil, fmt.Errorf("unknown Node field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case node.FieldType:
		v, ok := value.(node.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case node.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case node.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case node.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case node.FieldURLHome:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLHome(v)
		return nil
	case node.FieldURLDownload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLDownload(v)
		return nil
	case node.FieldLicenses:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenses(v)
		return nil
	case node.FieldLicenseConcluded:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseConcluded(v)
		return nil
	case node.FieldLicenseComments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseComments(v)
		return nil
	case node.FieldCopyright:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCopyright(v)
		return nil
	case node.FieldSourceInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceInfo(v)
		return nil
	case node.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case node.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case node.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case node.FieldAttribution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttribution(v)
		return nil
	case node.FieldFileTypes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileTypes(v)
		return nil
	case node.FieldPrimaryPurpose:
		v, ok := value.(node.PrimaryPurpose)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrimaryPurpose(v)
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Node numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Node nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeMutation) ResetField(name string) error {
	switch name {
	case node.FieldType:
		m.ResetType()
		return nil
	case node.FieldName:
		m.ResetName()
		return nil
	case node.FieldVersion:
		m.ResetVersion()
		return nil
	case node.FieldFileName:
		m.ResetFileName()
		return nil
	case node.FieldURLHome:
		m.ResetURLHome()
		return nil
	case node.FieldURLDownload:
		m.ResetURLDownload()
		return nil
	case node.FieldLicenses:
		m.ResetLicenses()
		return nil
	case node.FieldLicenseConcluded:
		m.ResetLicenseConcluded()
		return nil
	case node.FieldLicenseComments:
		m.ResetLicenseComments()
		return nil
	case node.FieldCopyright:
		m.ResetCopyright()
		return nil
	case node.FieldSourceInfo:
		m.ResetSourceInfo()
		return nil
	case node.FieldComment:
		m.ResetComment()
		return nil
	case node.FieldSummary:
		m.ResetSummary()
		return nil
	case node.FieldDescription:
		m.ResetDescription()
		return nil
	case node.FieldAttribution:
		m.ResetAttribution()
		return nil
	case node.FieldFileTypes:
		m.ResetFileTypes()
		return nil
	case node.FieldPrimaryPurpose:
		m.ResetPrimaryPurpose()
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.node_list != nil {
		edges = append(edges, node.EdgeNodeList)
	}
	if m.suppliers != nil {
		edges = append(edges, node.EdgeSuppliers)
	}
	if m.originators != nil {
		edges = append(edges, node.EdgeOriginators)
	}
	if m.external_references != nil {
		edges = append(edges, node.EdgeExternalReferences)
	}
	if m.identifiers != nil {
		edges = append(edges, node.EdgeIdentifiers)
	}
	if m.hashes != nil {
		edges = append(edges, node.EdgeHashes)
	}
	if m.release_date != nil {
		edges = append(edges, node.EdgeReleaseDate)
	}
	if m.build_date != nil {
		edges = append(edges, node.EdgeBuildDate)
	}
	if m.valid_until_date != nil {
		edges = append(edges, node.EdgeValidUntilDate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeNodeList:
		if id := m.node_list; id != nil {
			return []ent.Value{*id}
		}
	case node.EdgeSuppliers:
		ids := make([]ent.Value, 0, len(m.suppliers))
		for id := range m.suppliers {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeOriginators:
		ids := make([]ent.Value, 0, len(m.originators))
		for id := range m.originators {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeExternalReferences:
		ids := make([]ent.Value, 0, len(m.external_references))
		for id := range m.external_references {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeIdentifiers:
		ids := make([]ent.Value, 0, len(m.identifiers))
		for id := range m.identifiers {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeHashes:
		ids := make([]ent.Value, 0, len(m.hashes))
		for id := range m.hashes {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeReleaseDate:
		ids := make([]ent.Value, 0, len(m.release_date))
		for id := range m.release_date {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeBuildDate:
		ids := make([]ent.Value, 0, len(m.build_date))
		for id := range m.build_date {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeValidUntilDate:
		ids := make([]ent.Value, 0, len(m.valid_until_date))
		for id := range m.valid_until_date {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	if m.removedsuppliers != nil {
		edges = append(edges, node.EdgeSuppliers)
	}
	if m.removedoriginators != nil {
		edges = append(edges, node.EdgeOriginators)
	}
	if m.removedexternal_references != nil {
		edges = append(edges, node.EdgeExternalReferences)
	}
	if m.removedidentifiers != nil {
		edges = append(edges, node.EdgeIdentifiers)
	}
	if m.removedhashes != nil {
		edges = append(edges, node.EdgeHashes)
	}
	if m.removedrelease_date != nil {
		edges = append(edges, node.EdgeReleaseDate)
	}
	if m.removedbuild_date != nil {
		edges = append(edges, node.EdgeBuildDate)
	}
	if m.removedvalid_until_date != nil {
		edges = append(edges, node.EdgeValidUntilDate)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeSuppliers:
		ids := make([]ent.Value, 0, len(m.removedsuppliers))
		for id := range m.removedsuppliers {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeOriginators:
		ids := make([]ent.Value, 0, len(m.removedoriginators))
		for id := range m.removedoriginators {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeExternalReferences:
		ids := make([]ent.Value, 0, len(m.removedexternal_references))
		for id := range m.removedexternal_references {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeIdentifiers:
		ids := make([]ent.Value, 0, len(m.removedidentifiers))
		for id := range m.removedidentifiers {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeHashes:
		ids := make([]ent.Value, 0, len(m.removedhashes))
		for id := range m.removedhashes {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeReleaseDate:
		ids := make([]ent.Value, 0, len(m.removedrelease_date))
		for id := range m.removedrelease_date {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeBuildDate:
		ids := make([]ent.Value, 0, len(m.removedbuild_date))
		for id := range m.removedbuild_date {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeValidUntilDate:
		ids := make([]ent.Value, 0, len(m.removedvalid_until_date))
		for id := range m.removedvalid_until_date {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.clearednode_list {
		edges = append(edges, node.EdgeNodeList)
	}
	if m.clearedsuppliers {
		edges = append(edges, node.EdgeSuppliers)
	}
	if m.clearedoriginators {
		edges = append(edges, node.EdgeOriginators)
	}
	if m.clearedexternal_references {
		edges = append(edges, node.EdgeExternalReferences)
	}
	if m.clearedidentifiers {
		edges = append(edges, node.EdgeIdentifiers)
	}
	if m.clearedhashes {
		edges = append(edges, node.EdgeHashes)
	}
	if m.clearedrelease_date {
		edges = append(edges, node.EdgeReleaseDate)
	}
	if m.clearedbuild_date {
		edges = append(edges, node.EdgeBuildDate)
	}
	if m.clearedvalid_until_date {
		edges = append(edges, node.EdgeValidUntilDate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeMutation) EdgeCleared(name string) bool {
	switch name {
	case node.EdgeNodeList:
		return m.clearednode_list
	case node.EdgeSuppliers:
		return m.clearedsuppliers
	case node.EdgeOriginators:
		return m.clearedoriginators
	case node.EdgeExternalReferences:
		return m.clearedexternal_references
	case node.EdgeIdentifiers:
		return m.clearedidentifiers
	case node.EdgeHashes:
		return m.clearedhashes
	case node.EdgeReleaseDate:
		return m.clearedrelease_date
	case node.EdgeBuildDate:
		return m.clearedbuild_date
	case node.EdgeValidUntilDate:
		return m.clearedvalid_until_date
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeMutation) ClearEdge(name string) error {
	switch name {
	case node.EdgeNodeList:
		m.ClearNodeList()
		return nil
	}
	return fmt.Errorf("unknown Node unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeMutation) ResetEdge(name string) error {
	switch name {
	case node.EdgeNodeList:
		m.ResetNodeList()
		return nil
	case node.EdgeSuppliers:
		m.ResetSuppliers()
		return nil
	case node.EdgeOriginators:
		m.ResetOriginators()
		return nil
	case node.EdgeExternalReferences:
		m.ResetExternalReferences()
		return nil
	case node.EdgeIdentifiers:
		m.ResetIdentifiers()
		return nil
	case node.EdgeHashes:
		m.ResetHashes()
		return nil
	case node.EdgeReleaseDate:
		m.ResetReleaseDate()
		return nil
	case node.EdgeBuildDate:
		m.ResetBuildDate()
		return nil
	case node.EdgeValidUntilDate:
		m.ResetValidUntilDate()
		return nil
	}
	return fmt.Errorf("unknown Node edge %s", name)
}

// NodeListMutation represents an operation that mutates the NodeList nodes in the graph.
type NodeListMutation struct {
	config
	op              Op
	typ             string
	id              *int
	root_elements   *string
	clearedFields   map[string]struct{}
	document        *int
	cleareddocument bool
	nodes           map[string]struct{}
	removednodes    map[string]struct{}
	clearednodes    bool
	edges           map[int]struct{}
	removededges    map[int]struct{}
	clearededges    bool
	done            bool
	oldValue        func(context.Context) (*NodeList, error)
	predicates      []predicate.NodeList
}

var _ ent.Mutation = (*NodeListMutation)(nil)

// nodelistOption allows management of the mutation configuration using functional options.
type nodelistOption func(*NodeListMutation)

// newNodeListMutation creates new mutation for the NodeList entity.
func newNodeListMutation(c config, op Op, opts ...nodelistOption) *NodeListMutation {
	m := &NodeListMutation{
		config:        c,
		op:            op,
		typ:           TypeNodeList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeListID sets the ID field of the mutation.
func withNodeListID(id int) nodelistOption {
	return func(m *NodeListMutation) {
		var (
			err   error
			once  sync.Once
			value *NodeList
		)
		m.oldValue = func(ctx context.Context) (*NodeList, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NodeList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNodeList sets the old NodeList of the mutation.
func withNodeList(node *NodeList) nodelistOption {
	return func(m *NodeListMutation) {
		m.oldValue = func(context.Context) (*NodeList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeListMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NodeList.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRootElements sets the "root_elements" field.
func (m *NodeListMutation) SetRootElements(s string) {
	m.root_elements = &s
}

// RootElements returns the value of the "root_elements" field in the mutation.
func (m *NodeListMutation) RootElements() (r string, exists bool) {
	v := m.root_elements
	if v == nil {
		return
	}
	return *v, true
}

// OldRootElements returns the old "root_elements" field's value of the NodeList entity.
// If the NodeList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeListMutation) OldRootElements(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootElements is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootElements requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootElements: %w", err)
	}
	return oldValue.RootElements, nil
}

// ResetRootElements resets all changes to the "root_elements" field.
func (m *NodeListMutation) ResetRootElements() {
	m.root_elements = nil
}

// SetDocumentID sets the "document" edge to the Document entity by id.
func (m *NodeListMutation) SetDocumentID(id int) {
	m.document = &id
}

// ClearDocument clears the "document" edge to the Document entity.
func (m *NodeListMutation) ClearDocument() {
	m.cleareddocument = true
}

// DocumentCleared reports if the "document" edge to the Document entity was cleared.
func (m *NodeListMutation) DocumentCleared() bool {
	return m.cleareddocument
}

// DocumentID returns the "document" edge ID in the mutation.
func (m *NodeListMutation) DocumentID() (id int, exists bool) {
	if m.document != nil {
		return *m.document, true
	}
	return
}

// DocumentIDs returns the "document" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DocumentID instead. It exists only for internal usage by the builders.
func (m *NodeListMutation) DocumentIDs() (ids []int) {
	if id := m.document; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDocument resets all changes to the "document" edge.
func (m *NodeListMutation) ResetDocument() {
	m.document = nil
	m.cleareddocument = false
}

// AddNodeIDs adds the "nodes" edge to the Node entity by ids.
func (m *NodeListMutation) AddNodeIDs(ids ...string) {
	if m.nodes == nil {
		m.nodes = make(map[string]struct{})
	}
	for i := range ids {
		m.nodes[ids[i]] = struct{}{}
	}
}

// ClearNodes clears the "nodes" edge to the Node entity.
func (m *NodeListMutation) ClearNodes() {
	m.clearednodes = true
}

// NodesCleared reports if the "nodes" edge to the Node entity was cleared.
func (m *NodeListMutation) NodesCleared() bool {
	return m.clearednodes
}

// RemoveNodeIDs removes the "nodes" edge to the Node entity by IDs.
func (m *NodeListMutation) RemoveNodeIDs(ids ...string) {
	if m.removednodes == nil {
		m.removednodes = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.nodes, ids[i])
		m.removednodes[ids[i]] = struct{}{}
	}
}

// RemovedNodes returns the removed IDs of the "nodes" edge to the Node entity.
func (m *NodeListMutation) RemovedNodesIDs() (ids []string) {
	for id := range m.removednodes {
		ids = append(ids, id)
	}
	return
}

// NodesIDs returns the "nodes" edge IDs in the mutation.
func (m *NodeListMutation) NodesIDs() (ids []string) {
	for id := range m.nodes {
		ids = append(ids, id)
	}
	return
}

// ResetNodes resets all changes to the "nodes" edge.
func (m *NodeListMutation) ResetNodes() {
	m.nodes = nil
	m.clearednodes = false
	m.removednodes = nil
}

// AddEdgeIDs adds the "edges" edge to the Edge entity by ids.
func (m *NodeListMutation) AddEdgeIDs(ids ...int) {
	if m.edges == nil {
		m.edges = make(map[int]struct{})
	}
	for i := range ids {
		m.edges[ids[i]] = struct{}{}
	}
}

// ClearEdges clears the "edges" edge to the Edge entity.
func (m *NodeListMutation) ClearEdges() {
	m.clearededges = true
}

// EdgesCleared reports if the "edges" edge to the Edge entity was cleared.
func (m *NodeListMutation) EdgesCleared() bool {
	return m.clearededges
}

// RemoveEdgeIDs removes the "edges" edge to the Edge entity by IDs.
func (m *NodeListMutation) RemoveEdgeIDs(ids ...int) {
	if m.removededges == nil {
		m.removededges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.edges, ids[i])
		m.removededges[ids[i]] = struct{}{}
	}
}

// RemovedEdges returns the removed IDs of the "edges" edge to the Edge entity.
func (m *NodeListMutation) RemovedEdgesIDs() (ids []int) {
	for id := range m.removededges {
		ids = append(ids, id)
	}
	return
}

// EdgesIDs returns the "edges" edge IDs in the mutation.
func (m *NodeListMutation) EdgesIDs() (ids []int) {
	for id := range m.edges {
		ids = append(ids, id)
	}
	return
}

// ResetEdges resets all changes to the "edges" edge.
func (m *NodeListMutation) ResetEdges() {
	m.edges = nil
	m.clearededges = false
	m.removededges = nil
}

// Where appends a list predicates to the NodeListMutation builder.
func (m *NodeListMutation) Where(ps ...predicate.NodeList) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NodeListMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NodeListMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NodeList, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NodeListMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NodeListMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NodeList).
func (m *NodeListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeListMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.root_elements != nil {
		fields = append(fields, nodelist.FieldRootElements)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nodelist.FieldRootElements:
		return m.RootElements()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nodelist.FieldRootElements:
		return m.OldRootElements(ctx)
	}
	return nil, fmt.Errorf("unknown NodeList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nodelist.FieldRootElements:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootElements(v)
		return nil
	}
	return fmt.Errorf("unknown NodeList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeListMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeListMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeListMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NodeList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NodeList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeListMutation) ResetField(name string) error {
	switch name {
	case nodelist.FieldRootElements:
		m.ResetRootElements()
		return nil
	}
	return fmt.Errorf("unknown NodeList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeListMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.document != nil {
		edges = append(edges, nodelist.EdgeDocument)
	}
	if m.nodes != nil {
		edges = append(edges, nodelist.EdgeNodes)
	}
	if m.edges != nil {
		edges = append(edges, nodelist.EdgeEdges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeListMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nodelist.EdgeDocument:
		if id := m.document; id != nil {
			return []ent.Value{*id}
		}
	case nodelist.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.nodes))
		for id := range m.nodes {
			ids = append(ids, id)
		}
		return ids
	case nodelist.EdgeEdges:
		ids := make([]ent.Value, 0, len(m.edges))
		for id := range m.edges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removednodes != nil {
		edges = append(edges, nodelist.EdgeNodes)
	}
	if m.removededges != nil {
		edges = append(edges, nodelist.EdgeEdges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeListMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nodelist.EdgeNodes:
		ids := make([]ent.Value, 0, len(m.removednodes))
		for id := range m.removednodes {
			ids = append(ids, id)
		}
		return ids
	case nodelist.EdgeEdges:
		ids := make([]ent.Value, 0, len(m.removededges))
		for id := range m.removededges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddocument {
		edges = append(edges, nodelist.EdgeDocument)
	}
	if m.clearednodes {
		edges = append(edges, nodelist.EdgeNodes)
	}
	if m.clearededges {
		edges = append(edges, nodelist.EdgeEdges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeListMutation) EdgeCleared(name string) bool {
	switch name {
	case nodelist.EdgeDocument:
		return m.cleareddocument
	case nodelist.EdgeNodes:
		return m.clearednodes
	case nodelist.EdgeEdges:
		return m.clearededges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeListMutation) ClearEdge(name string) error {
	switch name {
	case nodelist.EdgeDocument:
		m.ClearDocument()
		return nil
	}
	return fmt.Errorf("unknown NodeList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeListMutation) ResetEdge(name string) error {
	switch name {
	case nodelist.EdgeDocument:
		m.ResetDocument()
		return nil
	case nodelist.EdgeNodes:
		m.ResetNodes()
		return nil
	case nodelist.EdgeEdges:
		m.ResetEdges()
		return nil
	}
	return fmt.Errorf("unknown NodeList edge %s", name)
}

// PersonMutation represents an operation that mutates the Person nodes in the graph.
type PersonMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	is_org          *bool
	email           *string
	url             *string
	phone           *string
	clearedFields   map[string]struct{}
	metadata        *string
	clearedmetadata bool
	node            *string
	clearednode     bool
	person          *int
	clearedperson   bool
	contacts        *int
	clearedcontacts bool
	done            bool
	oldValue        func(context.Context) (*Person, error)
	predicates      []predicate.Person
}

var _ ent.Mutation = (*PersonMutation)(nil)

// personOption allows management of the mutation configuration using functional options.
type personOption func(*PersonMutation)

// newPersonMutation creates new mutation for the Person entity.
func newPersonMutation(c config, op Op, opts ...personOption) *PersonMutation {
	m := &PersonMutation{
		config:        c,
		op:            op,
		typ:           TypePerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonID sets the ID field of the mutation.
func withPersonID(id int) personOption {
	return func(m *PersonMutation) {
		var (
			err   error
			once  sync.Once
			value *Person
		)
		m.oldValue = func(ctx context.Context) (*Person, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Person.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerson sets the old Person of the mutation.
func withPerson(node *Person) personOption {
	return func(m *PersonMutation) {
		m.oldValue = func(context.Context) (*Person, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Person.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PersonMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonMutation) ResetName() {
	m.name = nil
}

// SetIsOrg sets the "is_org" field.
func (m *PersonMutation) SetIsOrg(b bool) {
	m.is_org = &b
}

// IsOrg returns the value of the "is_org" field in the mutation.
func (m *PersonMutation) IsOrg() (r bool, exists bool) {
	v := m.is_org
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOrg returns the old "is_org" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIsOrg(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOrg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOrg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOrg: %w", err)
	}
	return oldValue.IsOrg, nil
}

// ResetIsOrg resets all changes to the "is_org" field.
func (m *PersonMutation) ResetIsOrg() {
	m.is_org = nil
}

// SetEmail sets the "email" field.
func (m *PersonMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PersonMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *PersonMutation) ResetEmail() {
	m.email = nil
}

// SetURL sets the "url" field.
func (m *PersonMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *PersonMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *PersonMutation) ResetURL() {
	m.url = nil
}

// SetPhone sets the "phone" field.
func (m *PersonMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *PersonMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *PersonMutation) ResetPhone() {
	m.phone = nil
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by id.
func (m *PersonMutation) SetMetadataID(id string) {
	m.metadata = &id
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *PersonMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *PersonMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataID returns the "metadata" edge ID in the mutation.
func (m *PersonMutation) MetadataID() (id string, exists bool) {
	if m.metadata != nil {
		return *m.metadata, true
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *PersonMutation) MetadataIDs() (ids []string) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *PersonMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *PersonMutation) SetNodeID(id string) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *PersonMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *PersonMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *PersonMutation) NodeID() (id string, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *PersonMutation) NodeIDs() (ids []string) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *PersonMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// SetPersonID sets the "person" edge to the Person entity by id.
func (m *PersonMutation) SetPersonID(id int) {
	m.person = &id
}

// ClearPerson clears the "person" edge to the Person entity.
func (m *PersonMutation) ClearPerson() {
	m.clearedperson = true
}

// PersonCleared reports if the "person" edge to the Person entity was cleared.
func (m *PersonMutation) PersonCleared() bool {
	return m.clearedperson
}

// PersonID returns the "person" edge ID in the mutation.
func (m *PersonMutation) PersonID() (id int, exists bool) {
	if m.person != nil {
		return *m.person, true
	}
	return
}

// PersonIDs returns the "person" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonID instead. It exists only for internal usage by the builders.
func (m *PersonMutation) PersonIDs() (ids []int) {
	if id := m.person; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPerson resets all changes to the "person" edge.
func (m *PersonMutation) ResetPerson() {
	m.person = nil
	m.clearedperson = false
}

// SetContactsID sets the "contacts" edge to the Person entity by id.
func (m *PersonMutation) SetContactsID(id int) {
	m.contacts = &id
}

// ClearContacts clears the "contacts" edge to the Person entity.
func (m *PersonMutation) ClearContacts() {
	m.clearedcontacts = true
}

// ContactsCleared reports if the "contacts" edge to the Person entity was cleared.
func (m *PersonMutation) ContactsCleared() bool {
	return m.clearedcontacts
}

// ContactsID returns the "contacts" edge ID in the mutation.
func (m *PersonMutation) ContactsID() (id int, exists bool) {
	if m.contacts != nil {
		return *m.contacts, true
	}
	return
}

// ContactsIDs returns the "contacts" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactsID instead. It exists only for internal usage by the builders.
func (m *PersonMutation) ContactsIDs() (ids []int) {
	if id := m.contacts; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContacts resets all changes to the "contacts" edge.
func (m *PersonMutation) ResetContacts() {
	m.contacts = nil
	m.clearedcontacts = false
}

// Where appends a list predicates to the PersonMutation builder.
func (m *PersonMutation) Where(ps ...predicate.Person) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Person, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Person).
func (m *PersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, person.FieldName)
	}
	if m.is_org != nil {
		fields = append(fields, person.FieldIsOrg)
	}
	if m.email != nil {
		fields = append(fields, person.FieldEmail)
	}
	if m.url != nil {
		fields = append(fields, person.FieldURL)
	}
	if m.phone != nil {
		fields = append(fields, person.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case person.FieldName:
		return m.Name()
	case person.FieldIsOrg:
		return m.IsOrg()
	case person.FieldEmail:
		return m.Email()
	case person.FieldURL:
		return m.URL()
	case person.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case person.FieldName:
		return m.OldName(ctx)
	case person.FieldIsOrg:
		return m.OldIsOrg(ctx)
	case person.FieldEmail:
		return m.OldEmail(ctx)
	case person.FieldURL:
		return m.OldURL(ctx)
	case person.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown Person field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case person.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case person.FieldIsOrg:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOrg(v)
		return nil
	case person.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case person.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case person.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Person numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Person nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonMutation) ResetField(name string) error {
	switch name {
	case person.FieldName:
		m.ResetName()
		return nil
	case person.FieldIsOrg:
		m.ResetIsOrg()
		return nil
	case person.FieldEmail:
		m.ResetEmail()
		return nil
	case person.FieldURL:
		m.ResetURL()
		return nil
	case person.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.metadata != nil {
		edges = append(edges, person.EdgeMetadata)
	}
	if m.node != nil {
		edges = append(edges, person.EdgeNode)
	}
	if m.person != nil {
		edges = append(edges, person.EdgePerson)
	}
	if m.contacts != nil {
		edges = append(edges, person.EdgeContacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	case person.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	case person.EdgePerson:
		if id := m.person; id != nil {
			return []ent.Value{*id}
		}
	case person.EdgeContacts:
		if id := m.contacts; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedmetadata {
		edges = append(edges, person.EdgeMetadata)
	}
	if m.clearednode {
		edges = append(edges, person.EdgeNode)
	}
	if m.clearedperson {
		edges = append(edges, person.EdgePerson)
	}
	if m.clearedcontacts {
		edges = append(edges, person.EdgeContacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonMutation) EdgeCleared(name string) bool {
	switch name {
	case person.EdgeMetadata:
		return m.clearedmetadata
	case person.EdgeNode:
		return m.clearednode
	case person.EdgePerson:
		return m.clearedperson
	case person.EdgeContacts:
		return m.clearedcontacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonMutation) ClearEdge(name string) error {
	switch name {
	case person.EdgeMetadata:
		m.ClearMetadata()
		return nil
	case person.EdgeNode:
		m.ClearNode()
		return nil
	case person.EdgePerson:
		m.ClearPerson()
		return nil
	case person.EdgeContacts:
		m.ClearContacts()
		return nil
	}
	return fmt.Errorf("unknown Person unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonMutation) ResetEdge(name string) error {
	switch name {
	case person.EdgeMetadata:
		m.ResetMetadata()
		return nil
	case person.EdgeNode:
		m.ResetNode()
		return nil
	case person.EdgePerson:
		m.ResetPerson()
		return nil
	case person.EdgeContacts:
		m.ResetContacts()
		return nil
	}
	return fmt.Errorf("unknown Person edge %s", name)
}

// TimestampMutation represents an operation that mutates the Timestamp nodes in the graph.
type TimestampMutation struct {
	config
	op              Op
	typ             string
	id              *int
	clearedFields   map[string]struct{}
	metadata        *string
	clearedmetadata bool
	done            bool
	oldValue        func(context.Context) (*Timestamp, error)
	predicates      []predicate.Timestamp
}

var _ ent.Mutation = (*TimestampMutation)(nil)

// timestampOption allows management of the mutation configuration using functional options.
type timestampOption func(*TimestampMutation)

// newTimestampMutation creates new mutation for the Timestamp entity.
func newTimestampMutation(c config, op Op, opts ...timestampOption) *TimestampMutation {
	m := &TimestampMutation{
		config:        c,
		op:            op,
		typ:           TypeTimestamp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTimestampID sets the ID field of the mutation.
func withTimestampID(id int) timestampOption {
	return func(m *TimestampMutation) {
		var (
			err   error
			once  sync.Once
			value *Timestamp
		)
		m.oldValue = func(ctx context.Context) (*Timestamp, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Timestamp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTimestamp sets the old Timestamp of the mutation.
func withTimestamp(node *Timestamp) timestampOption {
	return func(m *TimestampMutation) {
		m.oldValue = func(context.Context) (*Timestamp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TimestampMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TimestampMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TimestampMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TimestampMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Timestamp.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by id.
func (m *TimestampMutation) SetMetadataID(id string) {
	m.metadata = &id
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *TimestampMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *TimestampMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataID returns the "metadata" edge ID in the mutation.
func (m *TimestampMutation) MetadataID() (id string, exists bool) {
	if m.metadata != nil {
		return *m.metadata, true
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *TimestampMutation) MetadataIDs() (ids []string) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *TimestampMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// Where appends a list predicates to the TimestampMutation builder.
func (m *TimestampMutation) Where(ps ...predicate.Timestamp) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TimestampMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TimestampMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Timestamp, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TimestampMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TimestampMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Timestamp).
func (m *TimestampMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TimestampMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TimestampMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TimestampMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Timestamp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimestampMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Timestamp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TimestampMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TimestampMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimestampMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Timestamp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TimestampMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TimestampMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TimestampMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Timestamp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TimestampMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Timestamp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TimestampMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metadata != nil {
		edges = append(edges, timestamp.EdgeMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TimestampMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case timestamp.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TimestampMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TimestampMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TimestampMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetadata {
		edges = append(edges, timestamp.EdgeMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TimestampMutation) EdgeCleared(name string) bool {
	switch name {
	case timestamp.EdgeMetadata:
		return m.clearedmetadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TimestampMutation) ClearEdge(name string) error {
	switch name {
	case timestamp.EdgeMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Timestamp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TimestampMutation) ResetEdge(name string) error {
	switch name {
	case timestamp.EdgeMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Timestamp edge %s", name)
}

// ToolMutation represents an operation that mutates the Tool nodes in the graph.
type ToolMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	version         *string
	vendor          *string
	clearedFields   map[string]struct{}
	metadata        *string
	clearedmetadata bool
	done            bool
	oldValue        func(context.Context) (*Tool, error)
	predicates      []predicate.Tool
}

var _ ent.Mutation = (*ToolMutation)(nil)

// toolOption allows management of the mutation configuration using functional options.
type toolOption func(*ToolMutation)

// newToolMutation creates new mutation for the Tool entity.
func newToolMutation(c config, op Op, opts ...toolOption) *ToolMutation {
	m := &ToolMutation{
		config:        c,
		op:            op,
		typ:           TypeTool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withToolID sets the ID field of the mutation.
func withToolID(id int) toolOption {
	return func(m *ToolMutation) {
		var (
			err   error
			once  sync.Once
			value *Tool
		)
		m.oldValue = func(ctx context.Context) (*Tool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTool sets the old Tool of the mutation.
func withTool(node *Tool) toolOption {
	return func(m *ToolMutation) {
		m.oldValue = func(context.Context) (*Tool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ToolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ToolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ToolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ToolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ToolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ToolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ToolMutation) ResetName() {
	m.name = nil
}

// SetVersion sets the "version" field.
func (m *ToolMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *ToolMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *ToolMutation) ResetVersion() {
	m.version = nil
}

// SetVendor sets the "vendor" field.
func (m *ToolMutation) SetVendor(s string) {
	m.vendor = &s
}

// Vendor returns the value of the "vendor" field in the mutation.
func (m *ToolMutation) Vendor() (r string, exists bool) {
	v := m.vendor
	if v == nil {
		return
	}
	return *v, true
}

// OldVendor returns the old "vendor" field's value of the Tool entity.
// If the Tool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ToolMutation) OldVendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendor: %w", err)
	}
	return oldValue.Vendor, nil
}

// ResetVendor resets all changes to the "vendor" field.
func (m *ToolMutation) ResetVendor() {
	m.vendor = nil
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by id.
func (m *ToolMutation) SetMetadataID(id string) {
	m.metadata = &id
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (m *ToolMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared reports if the "metadata" edge to the Metadata entity was cleared.
func (m *ToolMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// MetadataID returns the "metadata" edge ID in the mutation.
func (m *ToolMutation) MetadataID() (id string, exists bool) {
	if m.metadata != nil {
		return *m.metadata, true
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetadataID instead. It exists only for internal usage by the builders.
func (m *ToolMutation) MetadataIDs() (ids []string) {
	if id := m.metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *ToolMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
}

// Where appends a list predicates to the ToolMutation builder.
func (m *ToolMutation) Where(ps ...predicate.Tool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ToolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ToolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ToolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ToolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tool).
func (m *ToolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ToolMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, tool.FieldName)
	}
	if m.version != nil {
		fields = append(fields, tool.FieldVersion)
	}
	if m.vendor != nil {
		fields = append(fields, tool.FieldVendor)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ToolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tool.FieldName:
		return m.Name()
	case tool.FieldVersion:
		return m.Version()
	case tool.FieldVendor:
		return m.Vendor()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ToolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tool.FieldName:
		return m.OldName(ctx)
	case tool.FieldVersion:
		return m.OldVersion(ctx)
	case tool.FieldVendor:
		return m.OldVendor(ctx)
	}
	return nil, fmt.Errorf("unknown Tool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tool.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case tool.FieldVendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendor(v)
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ToolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ToolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ToolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ToolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ToolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ToolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ToolMutation) ResetField(name string) error {
	switch name {
	case tool.FieldName:
		m.ResetName()
		return nil
	case tool.FieldVersion:
		m.ResetVersion()
		return nil
	case tool.FieldVendor:
		m.ResetVendor()
		return nil
	}
	return fmt.Errorf("unknown Tool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ToolMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metadata != nil {
		edges = append(edges, tool.EdgeMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ToolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tool.EdgeMetadata:
		if id := m.metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ToolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ToolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ToolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetadata {
		edges = append(edges, tool.EdgeMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ToolMutation) EdgeCleared(name string) bool {
	switch name {
	case tool.EdgeMetadata:
		return m.clearedmetadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ToolMutation) ClearEdge(name string) error {
	switch name {
	case tool.EdgeMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Tool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ToolMutation) ResetEdge(name string) error {
	switch name {
	case tool.EdgeMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Tool edge %s", name)
}
