// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/timestamp.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bomctl/bomctl/internal/ent/metadata"
	"github.com/bomctl/bomctl/internal/ent/timestamp"
)

// Timestamp is the model entity for the Timestamp schema.
type Timestamp struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimestampQuery when eager-loading is set.
	Edges                 TimestampEdges `json:"edges"`
	metadata_date         *string
	node_release_date     *string
	node_build_date       *string
	node_valid_until_date *string
	selectValues          sql.SelectValues
}

// TimestampEdges holds the relations/edges for other nodes in the graph.
type TimestampEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimestampEdges) MetadataOrErr() (*Metadata, error) {
	if e.Metadata != nil {
		return e.Metadata, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: metadata.Label}
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timestamp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timestamp.FieldID:
			values[i] = new(sql.NullInt64)
		case timestamp.ForeignKeys[0]: // metadata_date
			values[i] = new(sql.NullString)
		case timestamp.ForeignKeys[1]: // node_release_date
			values[i] = new(sql.NullString)
		case timestamp.ForeignKeys[2]: // node_build_date
			values[i] = new(sql.NullString)
		case timestamp.ForeignKeys[3]: // node_valid_until_date
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timestamp fields.
func (t *Timestamp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timestamp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case timestamp.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_date", values[i])
			} else if value.Valid {
				t.metadata_date = new(string)
				*t.metadata_date = value.String
			}
		case timestamp.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_release_date", values[i])
			} else if value.Valid {
				t.node_release_date = new(string)
				*t.node_release_date = value.String
			}
		case timestamp.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_build_date", values[i])
			} else if value.Valid {
				t.node_build_date = new(string)
				*t.node_build_date = value.String
			}
		case timestamp.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_valid_until_date", values[i])
			} else if value.Valid {
				t.node_valid_until_date = new(string)
				*t.node_valid_until_date = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Timestamp.
// This includes values selected through modifiers, order, etc.
func (t *Timestamp) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryMetadata queries the "metadata" edge of the Timestamp entity.
func (t *Timestamp) QueryMetadata() *MetadataQuery {
	return NewTimestampClient(t.config).QueryMetadata(t)
}

// Update returns a builder for updating this Timestamp.
// Note that you need to call Timestamp.Unwrap() before calling this method if this Timestamp
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timestamp) Update() *TimestampUpdateOne {
	return NewTimestampClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Timestamp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Timestamp) Unwrap() *Timestamp {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timestamp is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timestamp) String() string {
	var builder strings.Builder
	builder.WriteString("Timestamp(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Timestamps is a parsable slice of Timestamp.
type Timestamps []*Timestamp
