// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/node.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bomctl/bomctl/internal/ent/externalreference"
	"github.com/bomctl/bomctl/internal/ent/hashesentry"
	"github.com/bomctl/bomctl/internal/ent/identifiersentry"
	"github.com/bomctl/bomctl/internal/ent/node"
	"github.com/bomctl/bomctl/internal/ent/nodelist"
	"github.com/bomctl/bomctl/internal/ent/person"
	"github.com/bomctl/bomctl/internal/ent/predicate"
	"github.com/bomctl/bomctl/internal/ent/timestamp"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetType sets the "type" field.
func (nu *NodeUpdate) SetType(n node.Type) *NodeUpdate {
	nu.mutation.SetType(n)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableType(n *node.Type) *NodeUpdate {
	if n != nil {
		nu.SetType(*n)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetVersion sets the "version" field.
func (nu *NodeUpdate) SetVersion(s string) *NodeUpdate {
	nu.mutation.SetVersion(s)
	return nu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableVersion(s *string) *NodeUpdate {
	if s != nil {
		nu.SetVersion(*s)
	}
	return nu
}

// SetFileName sets the "file_name" field.
func (nu *NodeUpdate) SetFileName(s string) *NodeUpdate {
	nu.mutation.SetFileName(s)
	return nu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFileName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFileName(*s)
	}
	return nu
}

// SetURLHome sets the "url_home" field.
func (nu *NodeUpdate) SetURLHome(s string) *NodeUpdate {
	nu.mutation.SetURLHome(s)
	return nu
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLHome(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLHome(*s)
	}
	return nu
}

// SetURLDownload sets the "url_download" field.
func (nu *NodeUpdate) SetURLDownload(s string) *NodeUpdate {
	nu.mutation.SetURLDownload(s)
	return nu
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLDownload(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLDownload(*s)
	}
	return nu
}

// SetLicenses sets the "licenses" field.
func (nu *NodeUpdate) SetLicenses(s string) *NodeUpdate {
	nu.mutation.SetLicenses(s)
	return nu
}

// SetNillableLicenses sets the "licenses" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenses(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenses(*s)
	}
	return nu
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nu *NodeUpdate) SetLicenseConcluded(s string) *NodeUpdate {
	nu.mutation.SetLicenseConcluded(s)
	return nu
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseConcluded(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseConcluded(*s)
	}
	return nu
}

// SetLicenseComments sets the "license_comments" field.
func (nu *NodeUpdate) SetLicenseComments(s string) *NodeUpdate {
	nu.mutation.SetLicenseComments(s)
	return nu
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseComments(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseComments(*s)
	}
	return nu
}

// SetCopyright sets the "copyright" field.
func (nu *NodeUpdate) SetCopyright(s string) *NodeUpdate {
	nu.mutation.SetCopyright(s)
	return nu
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCopyright(s *string) *NodeUpdate {
	if s != nil {
		nu.SetCopyright(*s)
	}
	return nu
}

// SetSourceInfo sets the "source_info" field.
func (nu *NodeUpdate) SetSourceInfo(s string) *NodeUpdate {
	nu.mutation.SetSourceInfo(s)
	return nu
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSourceInfo(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSourceInfo(*s)
	}
	return nu
}

// SetComment sets the "comment" field.
func (nu *NodeUpdate) SetComment(s string) *NodeUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableComment(s *string) *NodeUpdate {
	if s != nil {
		nu.SetComment(*s)
	}
	return nu
}

// SetSummary sets the "summary" field.
func (nu *NodeUpdate) SetSummary(s string) *NodeUpdate {
	nu.mutation.SetSummary(s)
	return nu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSummary(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSummary(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NodeUpdate) SetDescription(s string) *NodeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDescription(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// SetAttribution sets the "attribution" field.
func (nu *NodeUpdate) SetAttribution(s string) *NodeUpdate {
	nu.mutation.SetAttribution(s)
	return nu
}

// SetNillableAttribution sets the "attribution" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAttribution(s *string) *NodeUpdate {
	if s != nil {
		nu.SetAttribution(*s)
	}
	return nu
}

// SetFileTypes sets the "file_types" field.
func (nu *NodeUpdate) SetFileTypes(s string) *NodeUpdate {
	nu.mutation.SetFileTypes(s)
	return nu
}

// SetNillableFileTypes sets the "file_types" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFileTypes(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFileTypes(*s)
	}
	return nu
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (nu *NodeUpdate) SetPrimaryPurpose(np node.PrimaryPurpose) *NodeUpdate {
	nu.mutation.SetPrimaryPurpose(np)
	return nu
}

// SetNillablePrimaryPurpose sets the "primary_purpose" field if the given value is not nil.
func (nu *NodeUpdate) SetNillablePrimaryPurpose(np *node.PrimaryPurpose) *NodeUpdate {
	if np != nil {
		nu.SetPrimaryPurpose(*np)
	}
	return nu
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by ID.
func (nu *NodeUpdate) SetNodeListID(id int) *NodeUpdate {
	nu.mutation.SetNodeListID(id)
	return nu
}

// SetNodeList sets the "node_list" edge to the NodeList entity.
func (nu *NodeUpdate) SetNodeList(n *NodeList) *NodeUpdate {
	return nu.SetNodeListID(n.ID)
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddSupplierIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddSupplierIDs(ids...)
	return nu
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nu *NodeUpdate) AddSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddOriginatorIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddOriginatorIDs(ids...)
	return nu
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nu *NodeUpdate) AddOriginators(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nu *NodeUpdate) AddExternalReferenceIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddExternalReferenceIDs(ids...)
	return nu
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) AddExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddExternalReferenceIDs(ids...)
}

// AddIdentifierIDs adds the "identifiers" edge to the IdentifiersEntry entity by IDs.
func (nu *NodeUpdate) AddIdentifierIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddIdentifierIDs(ids...)
	return nu
}

// AddIdentifiers adds the "identifiers" edges to the IdentifiersEntry entity.
func (nu *NodeUpdate) AddIdentifiers(i ...*IdentifiersEntry) *NodeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddIdentifierIDs(ids...)
}

// AddHashIDs adds the "hashes" edge to the HashesEntry entity by IDs.
func (nu *NodeUpdate) AddHashIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddHashIDs(ids...)
	return nu
}

// AddHashes adds the "hashes" edges to the HashesEntry entity.
func (nu *NodeUpdate) AddHashes(h ...*HashesEntry) *NodeUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.AddHashIDs(ids...)
}

// AddReleaseDateIDs adds the "release_date" edge to the Timestamp entity by IDs.
func (nu *NodeUpdate) AddReleaseDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddReleaseDateIDs(ids...)
	return nu
}

// AddReleaseDate adds the "release_date" edges to the Timestamp entity.
func (nu *NodeUpdate) AddReleaseDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddReleaseDateIDs(ids...)
}

// AddBuildDateIDs adds the "build_date" edge to the Timestamp entity by IDs.
func (nu *NodeUpdate) AddBuildDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddBuildDateIDs(ids...)
	return nu
}

// AddBuildDate adds the "build_date" edges to the Timestamp entity.
func (nu *NodeUpdate) AddBuildDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddBuildDateIDs(ids...)
}

// AddValidUntilDateIDs adds the "valid_until_date" edge to the Timestamp entity by IDs.
func (nu *NodeUpdate) AddValidUntilDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddValidUntilDateIDs(ids...)
	return nu
}

// AddValidUntilDate adds the "valid_until_date" edges to the Timestamp entity.
func (nu *NodeUpdate) AddValidUntilDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddValidUntilDateIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (nu *NodeUpdate) ClearNodeList() *NodeUpdate {
	nu.mutation.ClearNodeList()
	return nu
}

// ClearSuppliers clears all "suppliers" edges to the Person entity.
func (nu *NodeUpdate) ClearSuppliers() *NodeUpdate {
	nu.mutation.ClearSuppliers()
	return nu
}

// RemoveSupplierIDs removes the "suppliers" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveSupplierIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveSupplierIDs(ids...)
	return nu
}

// RemoveSuppliers removes "suppliers" edges to Person entities.
func (nu *NodeUpdate) RemoveSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveSupplierIDs(ids...)
}

// ClearOriginators clears all "originators" edges to the Person entity.
func (nu *NodeUpdate) ClearOriginators() *NodeUpdate {
	nu.mutation.ClearOriginators()
	return nu
}

// RemoveOriginatorIDs removes the "originators" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveOriginatorIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveOriginatorIDs(ids...)
	return nu
}

// RemoveOriginators removes "originators" edges to Person entities.
func (nu *NodeUpdate) RemoveOriginators(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveOriginatorIDs(ids...)
}

// ClearExternalReferences clears all "external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) ClearExternalReferences() *NodeUpdate {
	nu.mutation.ClearExternalReferences()
	return nu
}

// RemoveExternalReferenceIDs removes the "external_references" edge to ExternalReference entities by IDs.
func (nu *NodeUpdate) RemoveExternalReferenceIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveExternalReferenceIDs(ids...)
	return nu
}

// RemoveExternalReferences removes "external_references" edges to ExternalReference entities.
func (nu *NodeUpdate) RemoveExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveExternalReferenceIDs(ids...)
}

// ClearIdentifiers clears all "identifiers" edges to the IdentifiersEntry entity.
func (nu *NodeUpdate) ClearIdentifiers() *NodeUpdate {
	nu.mutation.ClearIdentifiers()
	return nu
}

// RemoveIdentifierIDs removes the "identifiers" edge to IdentifiersEntry entities by IDs.
func (nu *NodeUpdate) RemoveIdentifierIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveIdentifierIDs(ids...)
	return nu
}

// RemoveIdentifiers removes "identifiers" edges to IdentifiersEntry entities.
func (nu *NodeUpdate) RemoveIdentifiers(i ...*IdentifiersEntry) *NodeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveIdentifierIDs(ids...)
}

// ClearHashes clears all "hashes" edges to the HashesEntry entity.
func (nu *NodeUpdate) ClearHashes() *NodeUpdate {
	nu.mutation.ClearHashes()
	return nu
}

// RemoveHashIDs removes the "hashes" edge to HashesEntry entities by IDs.
func (nu *NodeUpdate) RemoveHashIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveHashIDs(ids...)
	return nu
}

// RemoveHashes removes "hashes" edges to HashesEntry entities.
func (nu *NodeUpdate) RemoveHashes(h ...*HashesEntry) *NodeUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.RemoveHashIDs(ids...)
}

// ClearReleaseDate clears all "release_date" edges to the Timestamp entity.
func (nu *NodeUpdate) ClearReleaseDate() *NodeUpdate {
	nu.mutation.ClearReleaseDate()
	return nu
}

// RemoveReleaseDateIDs removes the "release_date" edge to Timestamp entities by IDs.
func (nu *NodeUpdate) RemoveReleaseDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveReleaseDateIDs(ids...)
	return nu
}

// RemoveReleaseDate removes "release_date" edges to Timestamp entities.
func (nu *NodeUpdate) RemoveReleaseDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveReleaseDateIDs(ids...)
}

// ClearBuildDate clears all "build_date" edges to the Timestamp entity.
func (nu *NodeUpdate) ClearBuildDate() *NodeUpdate {
	nu.mutation.ClearBuildDate()
	return nu
}

// RemoveBuildDateIDs removes the "build_date" edge to Timestamp entities by IDs.
func (nu *NodeUpdate) RemoveBuildDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveBuildDateIDs(ids...)
	return nu
}

// RemoveBuildDate removes "build_date" edges to Timestamp entities.
func (nu *NodeUpdate) RemoveBuildDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveBuildDateIDs(ids...)
}

// ClearValidUntilDate clears all "valid_until_date" edges to the Timestamp entity.
func (nu *NodeUpdate) ClearValidUntilDate() *NodeUpdate {
	nu.mutation.ClearValidUntilDate()
	return nu
}

// RemoveValidUntilDateIDs removes the "valid_until_date" edge to Timestamp entities by IDs.
func (nu *NodeUpdate) RemoveValidUntilDateIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveValidUntilDateIDs(ids...)
	return nu
}

// RemoveValidUntilDate removes "valid_until_date" edges to Timestamp entities.
func (nu *NodeUpdate) RemoveValidUntilDate(t ...*Timestamp) *NodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveValidUntilDateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodeUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if v, ok := nu.mutation.PrimaryPurpose(); ok {
		if err := node.PrimaryPurposeValidator(v); err != nil {
			return &ValidationError{Name: "primary_purpose", err: fmt.Errorf(`ent: validator failed for field "Node.primary_purpose": %w`, err)}
		}
	}
	if _, ok := nu.mutation.NodeListID(); nu.mutation.NodeListCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Node.node_list"`)
	}
	return nil
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nu.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nu.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeString, value)
	}
	if value, ok := nu.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nu.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nu.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nu.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nu.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nu.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeString, value)
	}
	if value, ok := nu.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeString, value)
	}
	if value, ok := nu.mutation.PrimaryPurpose(); ok {
		_spec.SetField(node.FieldPrimaryPurpose, field.TypeEnum, value)
	}
	if nu.mutation.NodeListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !nu.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedOriginatorsIDs(); len(nodes) > 0 && !nu.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedExternalReferencesIDs(); len(nodes) > 0 && !nu.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.IdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedIdentifiersIDs(); len(nodes) > 0 && !nu.mutation.IdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.IdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.HashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedHashesIDs(); len(nodes) > 0 && !nu.mutation.HashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.HashesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ReleaseDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedReleaseDateIDs(); len(nodes) > 0 && !nu.mutation.ReleaseDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ReleaseDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.BuildDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedBuildDateIDs(); len(nodes) > 0 && !nu.mutation.BuildDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.BuildDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ValidUntilDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedValidUntilDateIDs(); len(nodes) > 0 && !nu.mutation.ValidUntilDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ValidUntilDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetType sets the "type" field.
func (nuo *NodeUpdateOne) SetType(n node.Type) *NodeUpdateOne {
	nuo.mutation.SetType(n)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableType(n *node.Type) *NodeUpdateOne {
	if n != nil {
		nuo.SetType(*n)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetVersion sets the "version" field.
func (nuo *NodeUpdateOne) SetVersion(s string) *NodeUpdateOne {
	nuo.mutation.SetVersion(s)
	return nuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableVersion(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetVersion(*s)
	}
	return nuo
}

// SetFileName sets the "file_name" field.
func (nuo *NodeUpdateOne) SetFileName(s string) *NodeUpdateOne {
	nuo.mutation.SetFileName(s)
	return nuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFileName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFileName(*s)
	}
	return nuo
}

// SetURLHome sets the "url_home" field.
func (nuo *NodeUpdateOne) SetURLHome(s string) *NodeUpdateOne {
	nuo.mutation.SetURLHome(s)
	return nuo
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLHome(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLHome(*s)
	}
	return nuo
}

// SetURLDownload sets the "url_download" field.
func (nuo *NodeUpdateOne) SetURLDownload(s string) *NodeUpdateOne {
	nuo.mutation.SetURLDownload(s)
	return nuo
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLDownload(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLDownload(*s)
	}
	return nuo
}

// SetLicenses sets the "licenses" field.
func (nuo *NodeUpdateOne) SetLicenses(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenses(s)
	return nuo
}

// SetNillableLicenses sets the "licenses" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenses(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenses(*s)
	}
	return nuo
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nuo *NodeUpdateOne) SetLicenseConcluded(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseConcluded(s)
	return nuo
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseConcluded(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseConcluded(*s)
	}
	return nuo
}

// SetLicenseComments sets the "license_comments" field.
func (nuo *NodeUpdateOne) SetLicenseComments(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseComments(s)
	return nuo
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseComments(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseComments(*s)
	}
	return nuo
}

// SetCopyright sets the "copyright" field.
func (nuo *NodeUpdateOne) SetCopyright(s string) *NodeUpdateOne {
	nuo.mutation.SetCopyright(s)
	return nuo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCopyright(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetCopyright(*s)
	}
	return nuo
}

// SetSourceInfo sets the "source_info" field.
func (nuo *NodeUpdateOne) SetSourceInfo(s string) *NodeUpdateOne {
	nuo.mutation.SetSourceInfo(s)
	return nuo
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSourceInfo(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSourceInfo(*s)
	}
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NodeUpdateOne) SetComment(s string) *NodeUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableComment(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetComment(*s)
	}
	return nuo
}

// SetSummary sets the "summary" field.
func (nuo *NodeUpdateOne) SetSummary(s string) *NodeUpdateOne {
	nuo.mutation.SetSummary(s)
	return nuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSummary(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSummary(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NodeUpdateOne) SetDescription(s string) *NodeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDescription(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// SetAttribution sets the "attribution" field.
func (nuo *NodeUpdateOne) SetAttribution(s string) *NodeUpdateOne {
	nuo.mutation.SetAttribution(s)
	return nuo
}

// SetNillableAttribution sets the "attribution" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAttribution(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetAttribution(*s)
	}
	return nuo
}

// SetFileTypes sets the "file_types" field.
func (nuo *NodeUpdateOne) SetFileTypes(s string) *NodeUpdateOne {
	nuo.mutation.SetFileTypes(s)
	return nuo
}

// SetNillableFileTypes sets the "file_types" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFileTypes(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFileTypes(*s)
	}
	return nuo
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (nuo *NodeUpdateOne) SetPrimaryPurpose(np node.PrimaryPurpose) *NodeUpdateOne {
	nuo.mutation.SetPrimaryPurpose(np)
	return nuo
}

// SetNillablePrimaryPurpose sets the "primary_purpose" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillablePrimaryPurpose(np *node.PrimaryPurpose) *NodeUpdateOne {
	if np != nil {
		nuo.SetPrimaryPurpose(*np)
	}
	return nuo
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by ID.
func (nuo *NodeUpdateOne) SetNodeListID(id int) *NodeUpdateOne {
	nuo.mutation.SetNodeListID(id)
	return nuo
}

// SetNodeList sets the "node_list" edge to the NodeList entity.
func (nuo *NodeUpdateOne) SetNodeList(n *NodeList) *NodeUpdateOne {
	return nuo.SetNodeListID(n.ID)
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddSupplierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddSupplierIDs(ids...)
	return nuo
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) AddSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddOriginatorIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddOriginatorIDs(ids...)
	return nuo
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nuo *NodeUpdateOne) AddOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nuo *NodeUpdateOne) AddExternalReferenceIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddExternalReferenceIDs(ids...)
	return nuo
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) AddExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddExternalReferenceIDs(ids...)
}

// AddIdentifierIDs adds the "identifiers" edge to the IdentifiersEntry entity by IDs.
func (nuo *NodeUpdateOne) AddIdentifierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddIdentifierIDs(ids...)
	return nuo
}

// AddIdentifiers adds the "identifiers" edges to the IdentifiersEntry entity.
func (nuo *NodeUpdateOne) AddIdentifiers(i ...*IdentifiersEntry) *NodeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddIdentifierIDs(ids...)
}

// AddHashIDs adds the "hashes" edge to the HashesEntry entity by IDs.
func (nuo *NodeUpdateOne) AddHashIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddHashIDs(ids...)
	return nuo
}

// AddHashes adds the "hashes" edges to the HashesEntry entity.
func (nuo *NodeUpdateOne) AddHashes(h ...*HashesEntry) *NodeUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.AddHashIDs(ids...)
}

// AddReleaseDateIDs adds the "release_date" edge to the Timestamp entity by IDs.
func (nuo *NodeUpdateOne) AddReleaseDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddReleaseDateIDs(ids...)
	return nuo
}

// AddReleaseDate adds the "release_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) AddReleaseDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddReleaseDateIDs(ids...)
}

// AddBuildDateIDs adds the "build_date" edge to the Timestamp entity by IDs.
func (nuo *NodeUpdateOne) AddBuildDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddBuildDateIDs(ids...)
	return nuo
}

// AddBuildDate adds the "build_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) AddBuildDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddBuildDateIDs(ids...)
}

// AddValidUntilDateIDs adds the "valid_until_date" edge to the Timestamp entity by IDs.
func (nuo *NodeUpdateOne) AddValidUntilDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddValidUntilDateIDs(ids...)
	return nuo
}

// AddValidUntilDate adds the "valid_until_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) AddValidUntilDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddValidUntilDateIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (nuo *NodeUpdateOne) ClearNodeList() *NodeUpdateOne {
	nuo.mutation.ClearNodeList()
	return nuo
}

// ClearSuppliers clears all "suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearSuppliers() *NodeUpdateOne {
	nuo.mutation.ClearSuppliers()
	return nuo
}

// RemoveSupplierIDs removes the "suppliers" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveSupplierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveSupplierIDs(ids...)
	return nuo
}

// RemoveSuppliers removes "suppliers" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveSupplierIDs(ids...)
}

// ClearOriginators clears all "originators" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearOriginators() *NodeUpdateOne {
	nuo.mutation.ClearOriginators()
	return nuo
}

// RemoveOriginatorIDs removes the "originators" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveOriginatorIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveOriginatorIDs(ids...)
	return nuo
}

// RemoveOriginators removes "originators" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveOriginatorIDs(ids...)
}

// ClearExternalReferences clears all "external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) ClearExternalReferences() *NodeUpdateOne {
	nuo.mutation.ClearExternalReferences()
	return nuo
}

// RemoveExternalReferenceIDs removes the "external_references" edge to ExternalReference entities by IDs.
func (nuo *NodeUpdateOne) RemoveExternalReferenceIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveExternalReferenceIDs(ids...)
	return nuo
}

// RemoveExternalReferences removes "external_references" edges to ExternalReference entities.
func (nuo *NodeUpdateOne) RemoveExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveExternalReferenceIDs(ids...)
}

// ClearIdentifiers clears all "identifiers" edges to the IdentifiersEntry entity.
func (nuo *NodeUpdateOne) ClearIdentifiers() *NodeUpdateOne {
	nuo.mutation.ClearIdentifiers()
	return nuo
}

// RemoveIdentifierIDs removes the "identifiers" edge to IdentifiersEntry entities by IDs.
func (nuo *NodeUpdateOne) RemoveIdentifierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveIdentifierIDs(ids...)
	return nuo
}

// RemoveIdentifiers removes "identifiers" edges to IdentifiersEntry entities.
func (nuo *NodeUpdateOne) RemoveIdentifiers(i ...*IdentifiersEntry) *NodeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveIdentifierIDs(ids...)
}

// ClearHashes clears all "hashes" edges to the HashesEntry entity.
func (nuo *NodeUpdateOne) ClearHashes() *NodeUpdateOne {
	nuo.mutation.ClearHashes()
	return nuo
}

// RemoveHashIDs removes the "hashes" edge to HashesEntry entities by IDs.
func (nuo *NodeUpdateOne) RemoveHashIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveHashIDs(ids...)
	return nuo
}

// RemoveHashes removes "hashes" edges to HashesEntry entities.
func (nuo *NodeUpdateOne) RemoveHashes(h ...*HashesEntry) *NodeUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.RemoveHashIDs(ids...)
}

// ClearReleaseDate clears all "release_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) ClearReleaseDate() *NodeUpdateOne {
	nuo.mutation.ClearReleaseDate()
	return nuo
}

// RemoveReleaseDateIDs removes the "release_date" edge to Timestamp entities by IDs.
func (nuo *NodeUpdateOne) RemoveReleaseDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveReleaseDateIDs(ids...)
	return nuo
}

// RemoveReleaseDate removes "release_date" edges to Timestamp entities.
func (nuo *NodeUpdateOne) RemoveReleaseDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveReleaseDateIDs(ids...)
}

// ClearBuildDate clears all "build_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) ClearBuildDate() *NodeUpdateOne {
	nuo.mutation.ClearBuildDate()
	return nuo
}

// RemoveBuildDateIDs removes the "build_date" edge to Timestamp entities by IDs.
func (nuo *NodeUpdateOne) RemoveBuildDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveBuildDateIDs(ids...)
	return nuo
}

// RemoveBuildDate removes "build_date" edges to Timestamp entities.
func (nuo *NodeUpdateOne) RemoveBuildDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveBuildDateIDs(ids...)
}

// ClearValidUntilDate clears all "valid_until_date" edges to the Timestamp entity.
func (nuo *NodeUpdateOne) ClearValidUntilDate() *NodeUpdateOne {
	nuo.mutation.ClearValidUntilDate()
	return nuo
}

// RemoveValidUntilDateIDs removes the "valid_until_date" edge to Timestamp entities by IDs.
func (nuo *NodeUpdateOne) RemoveValidUntilDateIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveValidUntilDateIDs(ids...)
	return nuo
}

// RemoveValidUntilDate removes "valid_until_date" edges to Timestamp entities.
func (nuo *NodeUpdateOne) RemoveValidUntilDate(t ...*Timestamp) *NodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveValidUntilDateIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodeUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.PrimaryPurpose(); ok {
		if err := node.PrimaryPurposeValidator(v); err != nil {
			return &ValidationError{Name: "primary_purpose", err: fmt.Errorf(`ent: validator failed for field "Node.primary_purpose": %w`, err)}
		}
	}
	if _, ok := nuo.mutation.NodeListID(); nuo.mutation.NodeListCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Node.node_list"`)
	}
	return nil
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeString, value)
	}
	if value, ok := nuo.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nuo.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeString, value)
	}
	if value, ok := nuo.mutation.PrimaryPurpose(); ok {
		_spec.SetField(node.FieldPrimaryPurpose, field.TypeEnum, value)
	}
	if nuo.mutation.NodeListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedSuppliersIDs(); len(nodes) > 0 && !nuo.mutation.SuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedOriginatorsIDs(); len(nodes) > 0 && !nuo.mutation.OriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedExternalReferencesIDs(); len(nodes) > 0 && !nuo.mutation.ExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: node.ExternalReferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.IdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedIdentifiersIDs(); len(nodes) > 0 && !nuo.mutation.IdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.IdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.HashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedHashesIDs(); len(nodes) > 0 && !nuo.mutation.HashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.HashesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: node.HashesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ReleaseDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedReleaseDateIDs(); len(nodes) > 0 && !nuo.mutation.ReleaseDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ReleaseDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.BuildDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedBuildDateIDs(); len(nodes) > 0 && !nuo.mutation.BuildDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.BuildDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ValidUntilDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedValidUntilDateIDs(); len(nodes) > 0 && !nuo.mutation.ValidUntilDateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ValidUntilDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
