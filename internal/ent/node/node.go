// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/node.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package node

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldURLHome holds the string denoting the url_home field in the database.
	FieldURLHome = "url_home"
	// FieldURLDownload holds the string denoting the url_download field in the database.
	FieldURLDownload = "url_download"
	// FieldLicenses holds the string denoting the licenses field in the database.
	FieldLicenses = "licenses"
	// FieldLicenseConcluded holds the string denoting the license_concluded field in the database.
	FieldLicenseConcluded = "license_concluded"
	// FieldLicenseComments holds the string denoting the license_comments field in the database.
	FieldLicenseComments = "license_comments"
	// FieldCopyright holds the string denoting the copyright field in the database.
	FieldCopyright = "copyright"
	// FieldSourceInfo holds the string denoting the source_info field in the database.
	FieldSourceInfo = "source_info"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAttribution holds the string denoting the attribution field in the database.
	FieldAttribution = "attribution"
	// FieldFileTypes holds the string denoting the file_types field in the database.
	FieldFileTypes = "file_types"
	// FieldPrimaryPurpose holds the string denoting the primary_purpose field in the database.
	FieldPrimaryPurpose = "primary_purpose"
	// EdgeNodeList holds the string denoting the node_list edge name in mutations.
	EdgeNodeList = "node_list"
	// EdgeSuppliers holds the string denoting the suppliers edge name in mutations.
	EdgeSuppliers = "suppliers"
	// EdgeOriginators holds the string denoting the originators edge name in mutations.
	EdgeOriginators = "originators"
	// EdgeExternalReferences holds the string denoting the external_references edge name in mutations.
	EdgeExternalReferences = "external_references"
	// EdgeIdentifiers holds the string denoting the identifiers edge name in mutations.
	EdgeIdentifiers = "identifiers"
	// EdgeHashes holds the string denoting the hashes edge name in mutations.
	EdgeHashes = "hashes"
	// EdgeReleaseDate holds the string denoting the release_date edge name in mutations.
	EdgeReleaseDate = "release_date"
	// EdgeBuildDate holds the string denoting the build_date edge name in mutations.
	EdgeBuildDate = "build_date"
	// EdgeValidUntilDate holds the string denoting the valid_until_date edge name in mutations.
	EdgeValidUntilDate = "valid_until_date"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// NodeListTable is the table that holds the node_list relation/edge.
	NodeListTable = "nodes"
	// NodeListInverseTable is the table name for the NodeList entity.
	// It exists in this package in order to avoid circular dependency with the "nodelist" package.
	NodeListInverseTable = "node_lists"
	// NodeListColumn is the table column denoting the node_list relation/edge.
	NodeListColumn = "node_list_nodes"
	// SuppliersTable is the table that holds the suppliers relation/edge.
	SuppliersTable = "persons"
	// SuppliersInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	SuppliersInverseTable = "persons"
	// SuppliersColumn is the table column denoting the suppliers relation/edge.
	SuppliersColumn = "node_suppliers"
	// OriginatorsTable is the table that holds the originators relation/edge.
	OriginatorsTable = "persons"
	// OriginatorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	OriginatorsInverseTable = "persons"
	// OriginatorsColumn is the table column denoting the originators relation/edge.
	OriginatorsColumn = "node_originators"
	// ExternalReferencesTable is the table that holds the external_references relation/edge. The primary key declared below.
	ExternalReferencesTable = "node_external_references"
	// ExternalReferencesInverseTable is the table name for the ExternalReference entity.
	// It exists in this package in order to avoid circular dependency with the "externalreference" package.
	ExternalReferencesInverseTable = "external_references"
	// IdentifiersTable is the table that holds the identifiers relation/edge.
	IdentifiersTable = "identifiers_entries"
	// IdentifiersInverseTable is the table name for the IdentifiersEntry entity.
	// It exists in this package in order to avoid circular dependency with the "identifiersentry" package.
	IdentifiersInverseTable = "identifiers_entries"
	// IdentifiersColumn is the table column denoting the identifiers relation/edge.
	IdentifiersColumn = "node_identifiers"
	// HashesTable is the table that holds the hashes relation/edge. The primary key declared below.
	HashesTable = "node_hashes"
	// HashesInverseTable is the table name for the HashesEntry entity.
	// It exists in this package in order to avoid circular dependency with the "hashesentry" package.
	HashesInverseTable = "hashes_entries"
	// ReleaseDateTable is the table that holds the release_date relation/edge.
	ReleaseDateTable = "timestamps"
	// ReleaseDateInverseTable is the table name for the Timestamp entity.
	// It exists in this package in order to avoid circular dependency with the "timestamp" package.
	ReleaseDateInverseTable = "timestamps"
	// ReleaseDateColumn is the table column denoting the release_date relation/edge.
	ReleaseDateColumn = "node_release_date"
	// BuildDateTable is the table that holds the build_date relation/edge.
	BuildDateTable = "timestamps"
	// BuildDateInverseTable is the table name for the Timestamp entity.
	// It exists in this package in order to avoid circular dependency with the "timestamp" package.
	BuildDateInverseTable = "timestamps"
	// BuildDateColumn is the table column denoting the build_date relation/edge.
	BuildDateColumn = "node_build_date"
	// ValidUntilDateTable is the table that holds the valid_until_date relation/edge.
	ValidUntilDateTable = "timestamps"
	// ValidUntilDateInverseTable is the table name for the Timestamp entity.
	// It exists in this package in order to avoid circular dependency with the "timestamp" package.
	ValidUntilDateInverseTable = "timestamps"
	// ValidUntilDateColumn is the table column denoting the valid_until_date relation/edge.
	ValidUntilDateColumn = "node_valid_until_date"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldVersion,
	FieldFileName,
	FieldURLHome,
	FieldURLDownload,
	FieldLicenses,
	FieldLicenseConcluded,
	FieldLicenseComments,
	FieldCopyright,
	FieldSourceInfo,
	FieldComment,
	FieldSummary,
	FieldDescription,
	FieldAttribution,
	FieldFileTypes,
	FieldPrimaryPurpose,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nodes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"node_list_nodes",
}

var (
	// ExternalReferencesPrimaryKey and ExternalReferencesColumn2 are the table columns denoting the
	// primary key for the external_references relation (M2M).
	ExternalReferencesPrimaryKey = []string{"node_id", "external_reference_id"}
	// HashesPrimaryKey and HashesColumn2 are the table columns denoting the
	// primary key for the hashes relation (M2M).
	HashesPrimaryKey = []string{"node_id", "hashes_entry_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePACKAGE Type = "PACKAGE"
	TypeFILE    Type = "FILE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePACKAGE, TypeFILE:
		return nil
	default:
		return fmt.Errorf("node: invalid enum value for type field: %q", _type)
	}
}

// PrimaryPurpose defines the type for the "primary_purpose" enum field.
type PrimaryPurpose string

// PrimaryPurpose values.
const (
	PrimaryPurposeUNKNOWN_PURPOSE        PrimaryPurpose = "UNKNOWN_PURPOSE"
	PrimaryPurposeAPPLICATION            PrimaryPurpose = "APPLICATION"
	PrimaryPurposeARCHIVE                PrimaryPurpose = "ARCHIVE"
	PrimaryPurposeBOM                    PrimaryPurpose = "BOM"
	PrimaryPurposeCONFIGURATION          PrimaryPurpose = "CONFIGURATION"
	PrimaryPurposeCONTAINER              PrimaryPurpose = "CONTAINER"
	PrimaryPurposeDATA                   PrimaryPurpose = "DATA"
	PrimaryPurposeDEVICE                 PrimaryPurpose = "DEVICE"
	PrimaryPurposeDEVICE_DRIVER          PrimaryPurpose = "DEVICE_DRIVER"
	PrimaryPurposeDOCUMENTATION          PrimaryPurpose = "DOCUMENTATION"
	PrimaryPurposeEVIDENCE               PrimaryPurpose = "EVIDENCE"
	PrimaryPurposeEXECUTABLE             PrimaryPurpose = "EXECUTABLE"
	PrimaryPurposeFILE                   PrimaryPurpose = "FILE"
	PrimaryPurposeFIRMWARE               PrimaryPurpose = "FIRMWARE"
	PrimaryPurposeFRAMEWORK              PrimaryPurpose = "FRAMEWORK"
	PrimaryPurposeINSTALL                PrimaryPurpose = "INSTALL"
	PrimaryPurposeLIBRARY                PrimaryPurpose = "LIBRARY"
	PrimaryPurposeMACHINE_LEARNING_MODEL PrimaryPurpose = "MACHINE_LEARNING_MODEL"
	PrimaryPurposeMANIFEST               PrimaryPurpose = "MANIFEST"
	PrimaryPurposeMODEL                  PrimaryPurpose = "MODEL"
	PrimaryPurposeMODULE                 PrimaryPurpose = "MODULE"
	PrimaryPurposeOPERATING_SYSTEM       PrimaryPurpose = "OPERATING_SYSTEM"
	PrimaryPurposeOTHER                  PrimaryPurpose = "OTHER"
	PrimaryPurposePATCH                  PrimaryPurpose = "PATCH"
	PrimaryPurposePLATFORM               PrimaryPurpose = "PLATFORM"
	PrimaryPurposeREQUIREMENT            PrimaryPurpose = "REQUIREMENT"
	PrimaryPurposeSOURCE                 PrimaryPurpose = "SOURCE"
	PrimaryPurposeSPECIFICATION          PrimaryPurpose = "SPECIFICATION"
	PrimaryPurposeTEST                   PrimaryPurpose = "TEST"
)

func (pp PrimaryPurpose) String() string {
	return string(pp)
}

// PrimaryPurposeValidator is a validator for the "primary_purpose" field enum values. It is called by the builders before save.
func PrimaryPurposeValidator(pp PrimaryPurpose) error {
	switch pp {
	case PrimaryPurposeUNKNOWN_PURPOSE, PrimaryPurposeAPPLICATION, PrimaryPurposeARCHIVE, PrimaryPurposeBOM, PrimaryPurposeCONFIGURATION, PrimaryPurposeCONTAINER, PrimaryPurposeDATA, PrimaryPurposeDEVICE, PrimaryPurposeDEVICE_DRIVER, PrimaryPurposeDOCUMENTATION, PrimaryPurposeEVIDENCE, PrimaryPurposeEXECUTABLE, PrimaryPurposeFILE, PrimaryPurposeFIRMWARE, PrimaryPurposeFRAMEWORK, PrimaryPurposeINSTALL, PrimaryPurposeLIBRARY, PrimaryPurposeMACHINE_LEARNING_MODEL, PrimaryPurposeMANIFEST, PrimaryPurposeMODEL, PrimaryPurposeMODULE, PrimaryPurposeOPERATING_SYSTEM, PrimaryPurposeOTHER, PrimaryPurposePATCH, PrimaryPurposePLATFORM, PrimaryPurposeREQUIREMENT, PrimaryPurposeSOURCE, PrimaryPurposeSPECIFICATION, PrimaryPurposeTEST:
		return nil
	default:
		return fmt.Errorf("node: invalid enum value for primary_purpose field: %q", pp)
	}
}

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByURLHome orders the results by the url_home field.
func ByURLHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLHome, opts...).ToFunc()
}

// ByURLDownload orders the results by the url_download field.
func ByURLDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLDownload, opts...).ToFunc()
}

// ByLicenses orders the results by the licenses field.
func ByLicenses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenses, opts...).ToFunc()
}

// ByLicenseConcluded orders the results by the license_concluded field.
func ByLicenseConcluded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseConcluded, opts...).ToFunc()
}

// ByLicenseComments orders the results by the license_comments field.
func ByLicenseComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseComments, opts...).ToFunc()
}

// ByCopyright orders the results by the copyright field.
func ByCopyright(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCopyright, opts...).ToFunc()
}

// BySourceInfo orders the results by the source_info field.
func BySourceInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceInfo, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAttribution orders the results by the attribution field.
func ByAttribution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttribution, opts...).ToFunc()
}

// ByFileTypes orders the results by the file_types field.
func ByFileTypes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileTypes, opts...).ToFunc()
}

// ByPrimaryPurpose orders the results by the primary_purpose field.
func ByPrimaryPurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrimaryPurpose, opts...).ToFunc()
}

// ByNodeListField orders the results by node_list field.
func ByNodeListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeListStep(), sql.OrderByField(field, opts...))
	}
}

// BySuppliersCount orders the results by suppliers count.
func BySuppliersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuppliersStep(), opts...)
	}
}

// BySuppliers orders the results by suppliers terms.
func BySuppliers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuppliersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOriginatorsCount orders the results by originators count.
func ByOriginatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOriginatorsStep(), opts...)
	}
}

// ByOriginators orders the results by originators terms.
func ByOriginators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExternalReferencesCount orders the results by external_references count.
func ByExternalReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExternalReferencesStep(), opts...)
	}
}

// ByExternalReferences orders the results by external_references terms.
func ByExternalReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExternalReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdentifiersCount orders the results by identifiers count.
func ByIdentifiersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentifiersStep(), opts...)
	}
}

// ByIdentifiers orders the results by identifiers terms.
func ByIdentifiers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentifiersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHashesCount orders the results by hashes count.
func ByHashesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHashesStep(), opts...)
	}
}

// ByHashes orders the results by hashes terms.
func ByHashes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHashesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReleaseDateCount orders the results by release_date count.
func ByReleaseDateCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReleaseDateStep(), opts...)
	}
}

// ByReleaseDate orders the results by release_date terms.
func ByReleaseDate(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseDateStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBuildDateCount orders the results by build_date count.
func ByBuildDateCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBuildDateStep(), opts...)
	}
}

// ByBuildDate orders the results by build_date terms.
func ByBuildDate(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildDateStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByValidUntilDateCount orders the results by valid_until_date count.
func ByValidUntilDateCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newValidUntilDateStep(), opts...)
	}
}

// ByValidUntilDate orders the results by valid_until_date terms.
func ByValidUntilDate(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newValidUntilDateStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNodeListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NodeListTable, NodeListColumn),
	)
}
func newSuppliersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuppliersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuppliersTable, SuppliersColumn),
	)
}
func newOriginatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OriginatorsTable, OriginatorsColumn),
	)
}
func newExternalReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExternalReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ExternalReferencesTable, ExternalReferencesPrimaryKey...),
	)
}
func newIdentifiersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentifiersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentifiersTable, IdentifiersColumn),
	)
}
func newHashesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HashesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, HashesTable, HashesPrimaryKey...),
	)
}
func newReleaseDateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseDateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReleaseDateTable, ReleaseDateColumn),
	)
}
func newBuildDateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildDateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BuildDateTable, BuildDateColumn),
	)
}
func newValidUntilDateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ValidUntilDateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ValidUntilDateTable, ValidUntilDateColumn),
	)
}
