// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/node.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bomctl/bomctl/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldVersion, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFileName, v))
}

// URLHome applies equality check predicate on the "url_home" field. It's identical to URLHomeEQ.
func URLHome(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldURLHome, v))
}

// URLDownload applies equality check predicate on the "url_download" field. It's identical to URLDownloadEQ.
func URLDownload(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldURLDownload, v))
}

// Licenses applies equality check predicate on the "licenses" field. It's identical to LicensesEQ.
func Licenses(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenses, v))
}

// LicenseConcluded applies equality check predicate on the "license_concluded" field. It's identical to LicenseConcludedEQ.
func LicenseConcluded(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenseConcluded, v))
}

// LicenseComments applies equality check predicate on the "license_comments" field. It's identical to LicenseCommentsEQ.
func LicenseComments(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenseComments, v))
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCopyright, v))
}

// SourceInfo applies equality check predicate on the "source_info" field. It's identical to SourceInfoEQ.
func SourceInfo(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSourceInfo, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldComment, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSummary, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDescription, v))
}

// Attribution applies equality check predicate on the "attribution" field. It's identical to AttributionEQ.
func Attribution(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAttribution, v))
}

// FileTypes applies equality check predicate on the "file_types" field. It's identical to FileTypesEQ.
func FileTypes(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFileTypes, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldVersion, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldFileName, v))
}

// URLHomeEQ applies the EQ predicate on the "url_home" field.
func URLHomeEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldURLHome, v))
}

// URLHomeNEQ applies the NEQ predicate on the "url_home" field.
func URLHomeNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldURLHome, v))
}

// URLHomeIn applies the In predicate on the "url_home" field.
func URLHomeIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldURLHome, vs...))
}

// URLHomeNotIn applies the NotIn predicate on the "url_home" field.
func URLHomeNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldURLHome, vs...))
}

// URLHomeGT applies the GT predicate on the "url_home" field.
func URLHomeGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldURLHome, v))
}

// URLHomeGTE applies the GTE predicate on the "url_home" field.
func URLHomeGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldURLHome, v))
}

// URLHomeLT applies the LT predicate on the "url_home" field.
func URLHomeLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldURLHome, v))
}

// URLHomeLTE applies the LTE predicate on the "url_home" field.
func URLHomeLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldURLHome, v))
}

// URLHomeContains applies the Contains predicate on the "url_home" field.
func URLHomeContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldURLHome, v))
}

// URLHomeHasPrefix applies the HasPrefix predicate on the "url_home" field.
func URLHomeHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldURLHome, v))
}

// URLHomeHasSuffix applies the HasSuffix predicate on the "url_home" field.
func URLHomeHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldURLHome, v))
}

// URLHomeEqualFold applies the EqualFold predicate on the "url_home" field.
func URLHomeEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldURLHome, v))
}

// URLHomeContainsFold applies the ContainsFold predicate on the "url_home" field.
func URLHomeContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldURLHome, v))
}

// URLDownloadEQ applies the EQ predicate on the "url_download" field.
func URLDownloadEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldURLDownload, v))
}

// URLDownloadNEQ applies the NEQ predicate on the "url_download" field.
func URLDownloadNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldURLDownload, v))
}

// URLDownloadIn applies the In predicate on the "url_download" field.
func URLDownloadIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldURLDownload, vs...))
}

// URLDownloadNotIn applies the NotIn predicate on the "url_download" field.
func URLDownloadNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldURLDownload, vs...))
}

// URLDownloadGT applies the GT predicate on the "url_download" field.
func URLDownloadGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldURLDownload, v))
}

// URLDownloadGTE applies the GTE predicate on the "url_download" field.
func URLDownloadGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldURLDownload, v))
}

// URLDownloadLT applies the LT predicate on the "url_download" field.
func URLDownloadLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldURLDownload, v))
}

// URLDownloadLTE applies the LTE predicate on the "url_download" field.
func URLDownloadLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldURLDownload, v))
}

// URLDownloadContains applies the Contains predicate on the "url_download" field.
func URLDownloadContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldURLDownload, v))
}

// URLDownloadHasPrefix applies the HasPrefix predicate on the "url_download" field.
func URLDownloadHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldURLDownload, v))
}

// URLDownloadHasSuffix applies the HasSuffix predicate on the "url_download" field.
func URLDownloadHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldURLDownload, v))
}

// URLDownloadEqualFold applies the EqualFold predicate on the "url_download" field.
func URLDownloadEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldURLDownload, v))
}

// URLDownloadContainsFold applies the ContainsFold predicate on the "url_download" field.
func URLDownloadContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldURLDownload, v))
}

// LicensesEQ applies the EQ predicate on the "licenses" field.
func LicensesEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenses, v))
}

// LicensesNEQ applies the NEQ predicate on the "licenses" field.
func LicensesNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldLicenses, v))
}

// LicensesIn applies the In predicate on the "licenses" field.
func LicensesIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldLicenses, vs...))
}

// LicensesNotIn applies the NotIn predicate on the "licenses" field.
func LicensesNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldLicenses, vs...))
}

// LicensesGT applies the GT predicate on the "licenses" field.
func LicensesGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldLicenses, v))
}

// LicensesGTE applies the GTE predicate on the "licenses" field.
func LicensesGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldLicenses, v))
}

// LicensesLT applies the LT predicate on the "licenses" field.
func LicensesLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldLicenses, v))
}

// LicensesLTE applies the LTE predicate on the "licenses" field.
func LicensesLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldLicenses, v))
}

// LicensesContains applies the Contains predicate on the "licenses" field.
func LicensesContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldLicenses, v))
}

// LicensesHasPrefix applies the HasPrefix predicate on the "licenses" field.
func LicensesHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldLicenses, v))
}

// LicensesHasSuffix applies the HasSuffix predicate on the "licenses" field.
func LicensesHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldLicenses, v))
}

// LicensesEqualFold applies the EqualFold predicate on the "licenses" field.
func LicensesEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldLicenses, v))
}

// LicensesContainsFold applies the ContainsFold predicate on the "licenses" field.
func LicensesContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldLicenses, v))
}

// LicenseConcludedEQ applies the EQ predicate on the "license_concluded" field.
func LicenseConcludedEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenseConcluded, v))
}

// LicenseConcludedNEQ applies the NEQ predicate on the "license_concluded" field.
func LicenseConcludedNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldLicenseConcluded, v))
}

// LicenseConcludedIn applies the In predicate on the "license_concluded" field.
func LicenseConcludedIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldLicenseConcluded, vs...))
}

// LicenseConcludedNotIn applies the NotIn predicate on the "license_concluded" field.
func LicenseConcludedNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldLicenseConcluded, vs...))
}

// LicenseConcludedGT applies the GT predicate on the "license_concluded" field.
func LicenseConcludedGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldLicenseConcluded, v))
}

// LicenseConcludedGTE applies the GTE predicate on the "license_concluded" field.
func LicenseConcludedGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldLicenseConcluded, v))
}

// LicenseConcludedLT applies the LT predicate on the "license_concluded" field.
func LicenseConcludedLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldLicenseConcluded, v))
}

// LicenseConcludedLTE applies the LTE predicate on the "license_concluded" field.
func LicenseConcludedLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldLicenseConcluded, v))
}

// LicenseConcludedContains applies the Contains predicate on the "license_concluded" field.
func LicenseConcludedContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldLicenseConcluded, v))
}

// LicenseConcludedHasPrefix applies the HasPrefix predicate on the "license_concluded" field.
func LicenseConcludedHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldLicenseConcluded, v))
}

// LicenseConcludedHasSuffix applies the HasSuffix predicate on the "license_concluded" field.
func LicenseConcludedHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldLicenseConcluded, v))
}

// LicenseConcludedEqualFold applies the EqualFold predicate on the "license_concluded" field.
func LicenseConcludedEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldLicenseConcluded, v))
}

// LicenseConcludedContainsFold applies the ContainsFold predicate on the "license_concluded" field.
func LicenseConcludedContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldLicenseConcluded, v))
}

// LicenseCommentsEQ applies the EQ predicate on the "license_comments" field.
func LicenseCommentsEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldLicenseComments, v))
}

// LicenseCommentsNEQ applies the NEQ predicate on the "license_comments" field.
func LicenseCommentsNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldLicenseComments, v))
}

// LicenseCommentsIn applies the In predicate on the "license_comments" field.
func LicenseCommentsIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldLicenseComments, vs...))
}

// LicenseCommentsNotIn applies the NotIn predicate on the "license_comments" field.
func LicenseCommentsNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldLicenseComments, vs...))
}

// LicenseCommentsGT applies the GT predicate on the "license_comments" field.
func LicenseCommentsGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldLicenseComments, v))
}

// LicenseCommentsGTE applies the GTE predicate on the "license_comments" field.
func LicenseCommentsGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldLicenseComments, v))
}

// LicenseCommentsLT applies the LT predicate on the "license_comments" field.
func LicenseCommentsLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldLicenseComments, v))
}

// LicenseCommentsLTE applies the LTE predicate on the "license_comments" field.
func LicenseCommentsLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldLicenseComments, v))
}

// LicenseCommentsContains applies the Contains predicate on the "license_comments" field.
func LicenseCommentsContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldLicenseComments, v))
}

// LicenseCommentsHasPrefix applies the HasPrefix predicate on the "license_comments" field.
func LicenseCommentsHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldLicenseComments, v))
}

// LicenseCommentsHasSuffix applies the HasSuffix predicate on the "license_comments" field.
func LicenseCommentsHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldLicenseComments, v))
}

// LicenseCommentsEqualFold applies the EqualFold predicate on the "license_comments" field.
func LicenseCommentsEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldLicenseComments, v))
}

// LicenseCommentsContainsFold applies the ContainsFold predicate on the "license_comments" field.
func LicenseCommentsContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldLicenseComments, v))
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldCopyright, v))
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldCopyright, vs...))
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldCopyright, vs...))
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldCopyright, v))
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldCopyright, v))
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldCopyright, v))
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldCopyright, v))
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldCopyright, v))
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldCopyright, v))
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldCopyright, v))
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldCopyright, v))
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldCopyright, v))
}

// SourceInfoEQ applies the EQ predicate on the "source_info" field.
func SourceInfoEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSourceInfo, v))
}

// SourceInfoNEQ applies the NEQ predicate on the "source_info" field.
func SourceInfoNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldSourceInfo, v))
}

// SourceInfoIn applies the In predicate on the "source_info" field.
func SourceInfoIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldSourceInfo, vs...))
}

// SourceInfoNotIn applies the NotIn predicate on the "source_info" field.
func SourceInfoNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldSourceInfo, vs...))
}

// SourceInfoGT applies the GT predicate on the "source_info" field.
func SourceInfoGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldSourceInfo, v))
}

// SourceInfoGTE applies the GTE predicate on the "source_info" field.
func SourceInfoGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldSourceInfo, v))
}

// SourceInfoLT applies the LT predicate on the "source_info" field.
func SourceInfoLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldSourceInfo, v))
}

// SourceInfoLTE applies the LTE predicate on the "source_info" field.
func SourceInfoLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldSourceInfo, v))
}

// SourceInfoContains applies the Contains predicate on the "source_info" field.
func SourceInfoContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldSourceInfo, v))
}

// SourceInfoHasPrefix applies the HasPrefix predicate on the "source_info" field.
func SourceInfoHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldSourceInfo, v))
}

// SourceInfoHasSuffix applies the HasSuffix predicate on the "source_info" field.
func SourceInfoHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldSourceInfo, v))
}

// SourceInfoEqualFold applies the EqualFold predicate on the "source_info" field.
func SourceInfoEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldSourceInfo, v))
}

// SourceInfoContainsFold applies the ContainsFold predicate on the "source_info" field.
func SourceInfoContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldSourceInfo, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldComment, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldSummary, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldDescription, v))
}

// AttributionEQ applies the EQ predicate on the "attribution" field.
func AttributionEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldAttribution, v))
}

// AttributionNEQ applies the NEQ predicate on the "attribution" field.
func AttributionNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldAttribution, v))
}

// AttributionIn applies the In predicate on the "attribution" field.
func AttributionIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldAttribution, vs...))
}

// AttributionNotIn applies the NotIn predicate on the "attribution" field.
func AttributionNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldAttribution, vs...))
}

// AttributionGT applies the GT predicate on the "attribution" field.
func AttributionGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldAttribution, v))
}

// AttributionGTE applies the GTE predicate on the "attribution" field.
func AttributionGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldAttribution, v))
}

// AttributionLT applies the LT predicate on the "attribution" field.
func AttributionLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldAttribution, v))
}

// AttributionLTE applies the LTE predicate on the "attribution" field.
func AttributionLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldAttribution, v))
}

// AttributionContains applies the Contains predicate on the "attribution" field.
func AttributionContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldAttribution, v))
}

// AttributionHasPrefix applies the HasPrefix predicate on the "attribution" field.
func AttributionHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldAttribution, v))
}

// AttributionHasSuffix applies the HasSuffix predicate on the "attribution" field.
func AttributionHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldAttribution, v))
}

// AttributionEqualFold applies the EqualFold predicate on the "attribution" field.
func AttributionEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldAttribution, v))
}

// AttributionContainsFold applies the ContainsFold predicate on the "attribution" field.
func AttributionContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldAttribution, v))
}

// FileTypesEQ applies the EQ predicate on the "file_types" field.
func FileTypesEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldFileTypes, v))
}

// FileTypesNEQ applies the NEQ predicate on the "file_types" field.
func FileTypesNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldFileTypes, v))
}

// FileTypesIn applies the In predicate on the "file_types" field.
func FileTypesIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldFileTypes, vs...))
}

// FileTypesNotIn applies the NotIn predicate on the "file_types" field.
func FileTypesNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldFileTypes, vs...))
}

// FileTypesGT applies the GT predicate on the "file_types" field.
func FileTypesGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldFileTypes, v))
}

// FileTypesGTE applies the GTE predicate on the "file_types" field.
func FileTypesGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldFileTypes, v))
}

// FileTypesLT applies the LT predicate on the "file_types" field.
func FileTypesLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldFileTypes, v))
}

// FileTypesLTE applies the LTE predicate on the "file_types" field.
func FileTypesLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldFileTypes, v))
}

// FileTypesContains applies the Contains predicate on the "file_types" field.
func FileTypesContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldFileTypes, v))
}

// FileTypesHasPrefix applies the HasPrefix predicate on the "file_types" field.
func FileTypesHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldFileTypes, v))
}

// FileTypesHasSuffix applies the HasSuffix predicate on the "file_types" field.
func FileTypesHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldFileTypes, v))
}

// FileTypesEqualFold applies the EqualFold predicate on the "file_types" field.
func FileTypesEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldFileTypes, v))
}

// FileTypesContainsFold applies the ContainsFold predicate on the "file_types" field.
func FileTypesContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldFileTypes, v))
}

// PrimaryPurposeEQ applies the EQ predicate on the "primary_purpose" field.
func PrimaryPurposeEQ(v PrimaryPurpose) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldPrimaryPurpose, v))
}

// PrimaryPurposeNEQ applies the NEQ predicate on the "primary_purpose" field.
func PrimaryPurposeNEQ(v PrimaryPurpose) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldPrimaryPurpose, v))
}

// PrimaryPurposeIn applies the In predicate on the "primary_purpose" field.
func PrimaryPurposeIn(vs ...PrimaryPurpose) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldPrimaryPurpose, vs...))
}

// PrimaryPurposeNotIn applies the NotIn predicate on the "primary_purpose" field.
func PrimaryPurposeNotIn(vs ...PrimaryPurpose) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldPrimaryPurpose, vs...))
}

// HasNodeList applies the HasEdge predicate on the "node_list" edge.
func HasNodeList() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeListTable, NodeListColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeListWith applies the HasEdge predicate on the "node_list" edge with a given conditions (other predicates).
func HasNodeListWith(preds ...predicate.NodeList) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newNodeListStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuppliers applies the HasEdge predicate on the "suppliers" edge.
func HasSuppliers() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuppliersTable, SuppliersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuppliersWith applies the HasEdge predicate on the "suppliers" edge with a given conditions (other predicates).
func HasSuppliersWith(preds ...predicate.Person) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newSuppliersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginators applies the HasEdge predicate on the "originators" edge.
func HasOriginators() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OriginatorsTable, OriginatorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginatorsWith applies the HasEdge predicate on the "originators" edge with a given conditions (other predicates).
func HasOriginatorsWith(preds ...predicate.Person) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newOriginatorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExternalReferences applies the HasEdge predicate on the "external_references" edge.
func HasExternalReferences() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ExternalReferencesTable, ExternalReferencesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExternalReferencesWith applies the HasEdge predicate on the "external_references" edge with a given conditions (other predicates).
func HasExternalReferencesWith(preds ...predicate.ExternalReference) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newExternalReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdentifiers applies the HasEdge predicate on the "identifiers" edge.
func HasIdentifiers() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdentifiersTable, IdentifiersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdentifiersWith applies the HasEdge predicate on the "identifiers" edge with a given conditions (other predicates).
func HasIdentifiersWith(preds ...predicate.IdentifiersEntry) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newIdentifiersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHashes applies the HasEdge predicate on the "hashes" edge.
func HasHashes() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, HashesTable, HashesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHashesWith applies the HasEdge predicate on the "hashes" edge with a given conditions (other predicates).
func HasHashesWith(preds ...predicate.HashesEntry) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newHashesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReleaseDate applies the HasEdge predicate on the "release_date" edge.
func HasReleaseDate() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReleaseDateTable, ReleaseDateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleaseDateWith applies the HasEdge predicate on the "release_date" edge with a given conditions (other predicates).
func HasReleaseDateWith(preds ...predicate.Timestamp) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newReleaseDateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildDate applies the HasEdge predicate on the "build_date" edge.
func HasBuildDate() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BuildDateTable, BuildDateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildDateWith applies the HasEdge predicate on the "build_date" edge with a given conditions (other predicates).
func HasBuildDateWith(preds ...predicate.Timestamp) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newBuildDateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValidUntilDate applies the HasEdge predicate on the "valid_until_date" edge.
func HasValidUntilDate() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ValidUntilDateTable, ValidUntilDateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValidUntilDateWith applies the HasEdge predicate on the "valid_until_date" edge with a given conditions (other predicates).
func HasValidUntilDateWith(preds ...predicate.Timestamp) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newValidUntilDateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(sql.NotPredicates(p))
}
