// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/identifiersentry.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package identifiersentry

import (
	"entgo.io/ent/dialect/sql"
	"github.com/bomctl/bomctl/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldLTE(FieldID, id))
}

// SoftwareIdentifierValue applies equality check predicate on the "software_identifier_value" field. It's identical to SoftwareIdentifierValueEQ.
func SoftwareIdentifierValue(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEQ(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierTypeEQ applies the EQ predicate on the "software_identifier_type" field.
func SoftwareIdentifierTypeEQ(v SoftwareIdentifierType) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEQ(FieldSoftwareIdentifierType, v))
}

// SoftwareIdentifierTypeNEQ applies the NEQ predicate on the "software_identifier_type" field.
func SoftwareIdentifierTypeNEQ(v SoftwareIdentifierType) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNEQ(FieldSoftwareIdentifierType, v))
}

// SoftwareIdentifierTypeIn applies the In predicate on the "software_identifier_type" field.
func SoftwareIdentifierTypeIn(vs ...SoftwareIdentifierType) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldIn(FieldSoftwareIdentifierType, vs...))
}

// SoftwareIdentifierTypeNotIn applies the NotIn predicate on the "software_identifier_type" field.
func SoftwareIdentifierTypeNotIn(vs ...SoftwareIdentifierType) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNotIn(FieldSoftwareIdentifierType, vs...))
}

// SoftwareIdentifierValueEQ applies the EQ predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueEQ(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEQ(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueNEQ applies the NEQ predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueNEQ(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNEQ(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueIn applies the In predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueIn(vs ...string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldIn(FieldSoftwareIdentifierValue, vs...))
}

// SoftwareIdentifierValueNotIn applies the NotIn predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueNotIn(vs ...string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldNotIn(FieldSoftwareIdentifierValue, vs...))
}

// SoftwareIdentifierValueGT applies the GT predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueGT(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldGT(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueGTE applies the GTE predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueGTE(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldGTE(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueLT applies the LT predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueLT(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldLT(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueLTE applies the LTE predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueLTE(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldLTE(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueContains applies the Contains predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueContains(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldContains(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueHasPrefix applies the HasPrefix predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueHasPrefix(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldHasPrefix(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueHasSuffix applies the HasSuffix predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueHasSuffix(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldHasSuffix(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueEqualFold applies the EqualFold predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueEqualFold(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldEqualFold(FieldSoftwareIdentifierValue, v))
}

// SoftwareIdentifierValueContainsFold applies the ContainsFold predicate on the "software_identifier_value" field.
func SoftwareIdentifierValueContainsFold(v string) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.FieldContainsFold(FieldSoftwareIdentifierValue, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IdentifiersEntry) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IdentifiersEntry) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IdentifiersEntry) predicate.IdentifiersEntry {
	return predicate.IdentifiersEntry(sql.NotPredicates(p))
}
