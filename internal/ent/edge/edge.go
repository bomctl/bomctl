// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/edge.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package edge

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the edge type in the database.
	Label = "edge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// Table holds the table name of the edge in the database.
	Table = "edges"
)

// Columns holds all SQL columns for edge fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldFrom,
	FieldTo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "edges"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"node_list_edges",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeUNKNOWN              Type = "UNKNOWN"
	TypeAmends               Type = "amends"
	TypeAncestor             Type = "ancestor"
	TypeBuildDependency      Type = "buildDependency"
	TypeBuildTool            Type = "buildTool"
	TypeContains             Type = "contains"
	TypeContainedBy          Type = "contained_by"
	TypeCopy                 Type = "copy"
	TypeDataFile             Type = "dataFile"
	TypeDependencyManifest   Type = "dependencyManifest"
	TypeDependsOn            Type = "dependsOn"
	TypeDependencyOf         Type = "dependencyOf"
	TypeDescendant           Type = "descendant"
	TypeDescribes            Type = "describes"
	TypeDescribedBy          Type = "describedBy"
	TypeDevDependency        Type = "devDependency"
	TypeDevTool              Type = "devTool"
	TypeDistributionArtifact Type = "distributionArtifact"
	TypeDocumentation        Type = "documentation"
	TypeDynamicLink          Type = "dynamicLink"
	TypeExample              Type = "example"
	TypeExpandedFromArchive  Type = "expandedFromArchive"
	TypeFileAdded            Type = "fileAdded"
	TypeFileDeleted          Type = "fileDeleted"
	TypeFileModified         Type = "fileModified"
	TypeGenerates            Type = "generates"
	TypeGeneratedFrom        Type = "generatedFrom"
	TypeMetafile             Type = "metafile"
	TypeOptionalComponent    Type = "optionalComponent"
	TypeOptionalDependency   Type = "optionalDependency"
	TypeOther                Type = "other"
	TypePackages             Type = "packages"
	TypePatch                Type = "patch"
	TypePrerequisite         Type = "prerequisite"
	TypePrerequisiteFor      Type = "prerequisiteFor"
	TypeProvidedDependency   Type = "providedDependency"
	TypeRequirementFor       Type = "requirementFor"
	TypeRuntimeDependency    Type = "runtimeDependency"
	TypeSpecificationFor     Type = "specificationFor"
	TypeStaticLink           Type = "staticLink"
	TypeTest                 Type = "test"
	TypeTestCase             Type = "testCase"
	TypeTestDependency       Type = "testDependency"
	TypeTestTool             Type = "testTool"
	TypeVariant              Type = "variant"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUNKNOWN, TypeAmends, TypeAncestor, TypeBuildDependency, TypeBuildTool, TypeContains, TypeContainedBy, TypeCopy, TypeDataFile, TypeDependencyManifest, TypeDependsOn, TypeDependencyOf, TypeDescendant, TypeDescribes, TypeDescribedBy, TypeDevDependency, TypeDevTool, TypeDistributionArtifact, TypeDocumentation, TypeDynamicLink, TypeExample, TypeExpandedFromArchive, TypeFileAdded, TypeFileDeleted, TypeFileModified, TypeGenerates, TypeGeneratedFrom, TypeMetafile, TypeOptionalComponent, TypeOptionalDependency, TypeOther, TypePackages, TypePatch, TypePrerequisite, TypePrerequisiteFor, TypeProvidedDependency, TypeRequirementFor, TypeRuntimeDependency, TypeSpecificationFor, TypeStaticLink, TypeTest, TypeTestCase, TypeTestDependency, TypeTestTool, TypeVariant:
		return nil
	default:
		return fmt.Errorf("edge: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Edge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}
