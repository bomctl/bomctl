// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/hashesentry.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package hashesentry

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hashesentry type in the database.
	Label = "hashes_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHashAlgorithmType holds the string denoting the hash_algorithm_type field in the database.
	FieldHashAlgorithmType = "hash_algorithm_type"
	// FieldHashData holds the string denoting the hash_data field in the database.
	FieldHashData = "hash_data"
	// EdgeExternalReferences holds the string denoting the external_references edge name in mutations.
	EdgeExternalReferences = "external_references"
	// EdgeNodes holds the string denoting the nodes edge name in mutations.
	EdgeNodes = "nodes"
	// Table holds the table name of the hashesentry in the database.
	Table = "hashes_entries"
	// ExternalReferencesTable is the table that holds the external_references relation/edge. The primary key declared below.
	ExternalReferencesTable = "external_reference_hashes"
	// ExternalReferencesInverseTable is the table name for the ExternalReference entity.
	// It exists in this package in order to avoid circular dependency with the "externalreference" package.
	ExternalReferencesInverseTable = "external_references"
	// NodesTable is the table that holds the nodes relation/edge. The primary key declared below.
	NodesTable = "node_hashes"
	// NodesInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	NodesInverseTable = "nodes"
)

// Columns holds all SQL columns for hashesentry fields.
var Columns = []string{
	FieldID,
	FieldHashAlgorithmType,
	FieldHashData,
}

var (
	// ExternalReferencesPrimaryKey and ExternalReferencesColumn2 are the table columns denoting the
	// primary key for the external_references relation (M2M).
	ExternalReferencesPrimaryKey = []string{"external_reference_id", "hashes_entry_id"}
	// NodesPrimaryKey and NodesColumn2 are the table columns denoting the
	// primary key for the nodes relation (M2M).
	NodesPrimaryKey = []string{"node_id", "hashes_entry_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// HashAlgorithmType defines the type for the "hash_algorithm_type" enum field.
type HashAlgorithmType string

// HashAlgorithmType values.
const (
	HashAlgorithmTypeUNKNOWN     HashAlgorithmType = "UNKNOWN"
	HashAlgorithmTypeMD5         HashAlgorithmType = "MD5"
	HashAlgorithmTypeSHA1        HashAlgorithmType = "SHA1"
	HashAlgorithmTypeSHA256      HashAlgorithmType = "SHA256"
	HashAlgorithmTypeSHA384      HashAlgorithmType = "SHA384"
	HashAlgorithmTypeSHA512      HashAlgorithmType = "SHA512"
	HashAlgorithmTypeSHA3_256    HashAlgorithmType = "SHA3_256"
	HashAlgorithmTypeSHA3_384    HashAlgorithmType = "SHA3_384"
	HashAlgorithmTypeSHA3_512    HashAlgorithmType = "SHA3_512"
	HashAlgorithmTypeBLAKE2B_256 HashAlgorithmType = "BLAKE2B_256"
	HashAlgorithmTypeBLAKE2B_384 HashAlgorithmType = "BLAKE2B_384"
	HashAlgorithmTypeBLAKE2B_512 HashAlgorithmType = "BLAKE2B_512"
	HashAlgorithmTypeBLAKE3      HashAlgorithmType = "BLAKE3"
	HashAlgorithmTypeMD2         HashAlgorithmType = "MD2"
	HashAlgorithmTypeADLER32     HashAlgorithmType = "ADLER32"
	HashAlgorithmTypeMD4         HashAlgorithmType = "MD4"
	HashAlgorithmTypeMD6         HashAlgorithmType = "MD6"
	HashAlgorithmTypeSHA224      HashAlgorithmType = "SHA224"
)

func (hat HashAlgorithmType) String() string {
	return string(hat)
}

// HashAlgorithmTypeValidator is a validator for the "hash_algorithm_type" field enum values. It is called by the builders before save.
func HashAlgorithmTypeValidator(hat HashAlgorithmType) error {
	switch hat {
	case HashAlgorithmTypeUNKNOWN, HashAlgorithmTypeMD5, HashAlgorithmTypeSHA1, HashAlgorithmTypeSHA256, HashAlgorithmTypeSHA384, HashAlgorithmTypeSHA512, HashAlgorithmTypeSHA3_256, HashAlgorithmTypeSHA3_384, HashAlgorithmTypeSHA3_512, HashAlgorithmTypeBLAKE2B_256, HashAlgorithmTypeBLAKE2B_384, HashAlgorithmTypeBLAKE2B_512, HashAlgorithmTypeBLAKE3, HashAlgorithmTypeMD2, HashAlgorithmTypeADLER32, HashAlgorithmTypeMD4, HashAlgorithmTypeMD6, HashAlgorithmTypeSHA224:
		return nil
	default:
		return fmt.Errorf("hashesentry: invalid enum value for hash_algorithm_type field: %q", hat)
	}
}

// OrderOption defines the ordering options for the HashesEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHashAlgorithmType orders the results by the hash_algorithm_type field.
func ByHashAlgorithmType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashAlgorithmType, opts...).ToFunc()
}

// ByHashData orders the results by the hash_data field.
func ByHashData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashData, opts...).ToFunc()
}

// ByExternalReferencesCount orders the results by external_references count.
func ByExternalReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExternalReferencesStep(), opts...)
	}
}

// ByExternalReferences orders the results by external_references terms.
func ByExternalReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExternalReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodesCount orders the results by nodes count.
func ByNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodesStep(), opts...)
	}
}

// ByNodes orders the results by nodes terms.
func ByNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExternalReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExternalReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ExternalReferencesTable, ExternalReferencesPrimaryKey...),
	)
}
func newNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NodesTable, NodesPrimaryKey...),
	)
}
