// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/nodelist.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bomctl/bomctl/internal/ent/nodelist"
	"github.com/bomctl/bomctl/internal/ent/predicate"
)

// NodeListDelete is the builder for deleting a NodeList entity.
type NodeListDelete struct {
	config
	hooks    []Hook
	mutation *NodeListMutation
}

// Where appends a list predicates to the NodeListDelete builder.
func (nld *NodeListDelete) Where(ps ...predicate.NodeList) *NodeListDelete {
	nld.mutation.Where(ps...)
	return nld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nld *NodeListDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nld.sqlExec, nld.mutation, nld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nld *NodeListDelete) ExecX(ctx context.Context) int {
	n, err := nld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nld *NodeListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nodelist.Table, sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt))
	if ps := nld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nld.mutation.done = true
	return affected, err
}

// NodeListDeleteOne is the builder for deleting a single NodeList entity.
type NodeListDeleteOne struct {
	nld *NodeListDelete
}

// Where appends a list predicates to the NodeListDelete builder.
func (nldo *NodeListDeleteOne) Where(ps ...predicate.NodeList) *NodeListDeleteOne {
	nldo.nld.mutation.Where(ps...)
	return nldo
}

// Exec executes the deletion query.
func (nldo *NodeListDeleteOne) Exec(ctx context.Context) error {
	n, err := nldo.nld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nodelist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nldo *NodeListDeleteOne) ExecX(ctx context.Context) {
	if err := nldo.Exec(ctx); err != nil {
		panic(err)
	}
}
