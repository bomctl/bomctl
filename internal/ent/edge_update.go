// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 bomctl authors
// SPDX-FileName: internal/ent/edge.go
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bomctl/bomctl/internal/ent/edge"
	"github.com/bomctl/bomctl/internal/ent/predicate"
)

// EdgeUpdate is the builder for updating Edge entities.
type EdgeUpdate struct {
	config
	hooks    []Hook
	mutation *EdgeMutation
}

// Where appends a list predicates to the EdgeUpdate builder.
func (eu *EdgeUpdate) Where(ps ...predicate.Edge) *EdgeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetType sets the "type" field.
func (eu *EdgeUpdate) SetType(e edge.Type) *EdgeUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EdgeUpdate) SetNillableType(e *edge.Type) *EdgeUpdate {
	if e != nil {
		eu.SetType(*e)
	}
	return eu
}

// SetFrom sets the "from" field.
func (eu *EdgeUpdate) SetFrom(s string) *EdgeUpdate {
	eu.mutation.SetFrom(s)
	return eu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (eu *EdgeUpdate) SetNillableFrom(s *string) *EdgeUpdate {
	if s != nil {
		eu.SetFrom(*s)
	}
	return eu
}

// SetTo sets the "to" field.
func (eu *EdgeUpdate) SetTo(s string) *EdgeUpdate {
	eu.mutation.SetTo(s)
	return eu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (eu *EdgeUpdate) SetNillableTo(s *string) *EdgeUpdate {
	if s != nil {
		eu.SetTo(*s)
	}
	return eu
}

// Mutation returns the EdgeMutation object of the builder.
func (eu *EdgeUpdate) Mutation() *EdgeMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EdgeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EdgeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EdgeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EdgeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EdgeUpdate) check() error {
	if v, ok := eu.mutation.GetType(); ok {
		if err := edge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Edge.type": %w`, err)}
		}
	}
	return nil
}

func (eu *EdgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(edge.Table, edge.Columns, sqlgraph.NewFieldSpec(edge.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(edge.FieldType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.From(); ok {
		_spec.SetField(edge.FieldFrom, field.TypeString, value)
	}
	if value, ok := eu.mutation.To(); ok {
		_spec.SetField(edge.FieldTo, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{edge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EdgeUpdateOne is the builder for updating a single Edge entity.
type EdgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EdgeMutation
}

// SetType sets the "type" field.
func (euo *EdgeUpdateOne) SetType(e edge.Type) *EdgeUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EdgeUpdateOne) SetNillableType(e *edge.Type) *EdgeUpdateOne {
	if e != nil {
		euo.SetType(*e)
	}
	return euo
}

// SetFrom sets the "from" field.
func (euo *EdgeUpdateOne) SetFrom(s string) *EdgeUpdateOne {
	euo.mutation.SetFrom(s)
	return euo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (euo *EdgeUpdateOne) SetNillableFrom(s *string) *EdgeUpdateOne {
	if s != nil {
		euo.SetFrom(*s)
	}
	return euo
}

// SetTo sets the "to" field.
func (euo *EdgeUpdateOne) SetTo(s string) *EdgeUpdateOne {
	euo.mutation.SetTo(s)
	return euo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (euo *EdgeUpdateOne) SetNillableTo(s *string) *EdgeUpdateOne {
	if s != nil {
		euo.SetTo(*s)
	}
	return euo
}

// Mutation returns the EdgeMutation object of the builder.
func (euo *EdgeUpdateOne) Mutation() *EdgeMutation {
	return euo.mutation
}

// Where appends a list predicates to the EdgeUpdate builder.
func (euo *EdgeUpdateOne) Where(ps ...predicate.Edge) *EdgeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EdgeUpdateOne) Select(field string, fields ...string) *EdgeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Edge entity.
func (euo *EdgeUpdateOne) Save(ctx context.Context) (*Edge, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EdgeUpdateOne) SaveX(ctx context.Context) *Edge {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EdgeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EdgeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EdgeUpdateOne) check() error {
	if v, ok := euo.mutation.GetType(); ok {
		if err := edge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Edge.type": %w`, err)}
		}
	}
	return nil
}

func (euo *EdgeUpdateOne) sqlSave(ctx context.Context) (_node *Edge, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(edge.Table, edge.Columns, sqlgraph.NewFieldSpec(edge.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Edge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, edge.FieldID)
		for _, f := range fields {
			if !edge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != edge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(edge.FieldType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.From(); ok {
		_spec.SetField(edge.FieldFrom, field.TypeString, value)
	}
	if value, ok := euo.mutation.To(); ok {
		_spec.SetField(edge.FieldTo, field.TypeString, value)
	}
	_node = &Edge{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{edge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
