# ------------------------------------------------------------------------
# SPDX-FileCopyrightText: Copyright Â© 2024 bomctl a Series of LF Projects, LLC
# SPDX-FileName: Taskfile.yml
# SPDX-FileType: SOURCE
# SPDX-License-Identifier: Apache-2.0
# ------------------------------------------------------------------------
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------
---
# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: "3"

env:
  GO111MODULE: "on"
  GOPATH:
    sh: go env GOPATH
  GOPROXY: https://proxy.golang.org,direct
  LDFLAGS: -s -w
    -X=github.com/bomctl/bomctl/cmd.VersionMajor={{.VERSION_MAJOR}}
    -X=github.com/bomctl/bomctl/cmd.VersionMinor={{.VERSION_MINOR}}
    -X=github.com/bomctl/bomctl/cmd.VersionPatch={{.VERSION_PATCH}}
    -X=github.com/bomctl/bomctl/cmd.VersionPre={{.VERSION_PRE}}
    -X=github.com/bomctl/bomctl/cmd.BuildDate={{.BUILD_DATE}}
  BOLD: \033[1m
  CYAN: \033[36m
  YELLOW: \033[33m
  RESET: \033[0m

vars:
  BUILD_DATE:
    sh: date -u +'%Y-%m-%dT%H:%M:%SZ'
  GIT_SHA:
    sh: git rev-parse HEAD
  GOLANGCI_LINT_INSTALL: https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
  GOLANGCI_LINT_VERSION: v1.60.3
  MARKDOWN_FILES:
    sh: git ls-files '*.md'
  SHELL_FILES:
    sh: git ls-files '*.sh'
  SHELLCHECK_ARCH: '{{eq ARCH "amd64" | ternary "x86_64" "aarch64"}}'
  SHELLCHECK_VERSION: v0.10.0
  SHELLCHECK_RELEASE_URL: https://github.com/koalaman/shellcheck/releases/download/{{.SHELLCHECK_VERSION}}
  SHFMT_VERSION: v3.9.0
  TOOLS_DIR: '{{joinPath .ROOT_DIR ".bin"}}'
  VERSION:
    sh: '{{default "Undefined" "git describe --tags --abbrev=0"}}'
  VERSION_REGEX: v(\d+)\.(\d+)\.(\d+)
  VERSION_MAJOR: '{{regexReplaceAll .VERSION_REGEX .VERSION "${1}"}}'
  VERSION_MINOR: '{{regexReplaceAll .VERSION_REGEX .VERSION "${2}"}}'
  VERSION_PATCH: '{{regexReplaceAll .VERSION_REGEX .VERSION "${3}"}}'
  YAML_FILES:
    sh: git ls-files '*.yml' '*.yaml'

tasks:
  # ----------------------------------------------------------------------------
  # Dev tools tasks
  # ----------------------------------------------------------------------------
  install:
    desc: Install dev tools
    cmds:
      - task: install:golangci-lint
      - task: install:shellcheck:unix
      - task: install:shellcheck:windows
      - task: install:shfmt

  install:golangci-lint:
    desc: Install golangci-lint
    status:
      - test -x {{.TOOLS_DIR}}/golangci-lint
    cmd: curl --fail --silent --show-error --location {{.GOLANGCI_LINT_INSTALL}} |
      sh -s -- -b {{.TOOLS_DIR}} {{.GOLANGCI_LINT_VERSION}}

  install:shellcheck:unix:
    desc: Install shellcheck
    platforms: [darwin, linux]
    vars:
      SHELLCHECK_FILENAME: shellcheck-{{.SHELLCHECK_VERSION}}.{{OS}}.{{.SHELLCHECK_ARCH}}.tar.xz
      SHELLCHECK_DOWNLOAD_URL: "{{.SHELLCHECK_RELEASE_URL}}/{{.SHELLCHECK_FILENAME}}"
    status:
      - test -x {{.TOOLS_DIR}}/shellcheck
    cmd: curl --fail --silent --show-error --location --url {{.SHELLCHECK_DOWNLOAD_URL}} |
      tar --extract --xz --directory {{.TOOLS_DIR}} --strip-components=1 shellcheck-{{.SHELLCHECK_VERSION}}/shellcheck

  install:shellcheck:windows:
    desc: Install shellcheck
    platforms: [windows]
    vars:
      SHELLCHECK_FILENAME: shellcheck-{{.SHELLCHECK_VERSION}}.zip
      SHELLCHECK_DOWNLOAD_URL: "{{.SHELLCHECK_RELEASE_URL}}/{{.SHELLCHECK_FILENAME}}"
    status:
      - test -x {{.TOOLS_DIR}}/shellcheck.exe
    cmds:
      - curl --fail --silent --show-error --location --url {{.SHELLCHECK_DOWNLOAD_URL}} --output temp.zip
      - defer: rm -f temp.zip
      - unzip temp.zip -d {{.TOOLS_DIR}}

  install:shfmt:
    desc: Install shfmt
    vars:
      SHFMT_FILENAME: shfmt_{{.SHFMT_VERSION}}_{{OS}}_{{ARCH}}{{exeExt}}
      SHFMT_DOWNLOAD_URL: https://github.com/mvdan/sh/releases/download/{{.SHFMT_VERSION}}/{{.SHFMT_FILENAME}}
    status:
      - test -x {{.TOOLS_DIR}}/shfmt{{exeExt}}
    cmds:
      - curl --fail --silent --show-error --location
        --url {{.SHFMT_DOWNLOAD_URL}}
        --output {{.TOOLS_DIR}}/shfmt{{exeExt}}
      - '{{if ne OS "windows"}}chmod +x {{.TOOLS_DIR}}/shfmt{{end}}'

  # ----------------------------------------------------------------------------
  # Build tasks
  # ----------------------------------------------------------------------------
  clean: rm -rf dist

  gobuild:
    internal: true
    generates:
      - "{{.OUTPUT}}"
    env:
      CGO_ENABLED: 0
      GOOS: "{{.GOOS}}"
      GOARCH: "{{.GOARCH}}"
    vars:
      OUTPUT: '{{joinPath "dist" (list .GOOS .GOARCH | join "-") "bomctl"}}{{.EXT}}'
    cmd: go build -trimpath -o {{.OUTPUT}} -ldflags="${LDFLAGS}"

  build:
    desc: Build binaries for all platforms and CPU architectures
    cmds:
      - task: build:linux:amd
      - task: build:linux:arm
      - task: build:macos:intel
      - task: build:macos:apple
      - task: build:windows:amd
      - task: build:windows:arm

  build:linux:amd:
    desc: Build for Linux on AMD64
    cmd:
      task: gobuild
      vars:
        GOOS: linux
        GOARCH: amd64

  build:linux:arm:
    desc: Build for Linux on ARM
    cmd:
      task: gobuild
      vars:
        GOOS: linux
        GOARCH: arm64

  build:macos:intel:
    desc: Build for macOS on AMD64
    cmd:
      task: gobuild
      vars:
        GOOS: darwin
        GOARCH: amd64

  build:macos:apple:
    desc: Build for macOS on ARM
    cmd:
      task: gobuild
      vars:
        GOOS: darwin
        GOARCH: arm64

  build:windows:amd:
    desc: Build for Windows on AMD64
    cmd:
      task: gobuild
      vars:
        EXT: .exe
        GOOS: windows
        GOARCH: amd64

  build:windows:arm:
    desc: Build for Windows on ARM
    cmd:
      task: gobuild
      vars:
        EXT: .exe
        GOOS: windows
        GOARCH: arm64

  # ----------------------------------------------------------------------------
  # Lint tasks
  # ----------------------------------------------------------------------------
  run-lint:
    silent: true
    vars:
      CLI_ARGS: '{{.CLI_ARGS | join " "}}'
    preconditions:
      - sh: command -v {{.CLI_NAME}}
        msg: "{{.CLI_NAME}} not found, please install and run the command again."
    cmds:
      - printf "\nRunning ${CYAN}{{.CLI_NAME}} {{.CLI_ARGS}}${RESET}\n"
      - PATH={{.TOOLS_DIR}}{{eq OS "windows" | ternary ";" ":"}}${PATH} {{.CLI_NAME}} {{.CLI_ARGS}}

  lint:
    desc: Lint Golang code, markdown, shell scripts, and YAML files
    cmds:
      - task: lint:go
      - task: lint:markdown
      - task: lint:shell
      - task: lint:yaml

  lint:go:
    desc: Lint Golang code files
    cmd:
      task: run-lint
      vars:
        CLI_NAME: golangci-lint
        CLI_ARGS: [run, --verbose]

  lint:go:fix:
    desc: Fix golangci-lint findings
    cmd:
      task: run-lint
      vars:
        CLI_NAME: golangci-lint
        CLI_ARGS: [run, --fix, --verbose]

  lint:markdown:
    desc: Lint markdown files
    cmd:
      task: run-lint
      vars:
        CLI_NAME: markdownlint-cli2
        CLI_ARGS: "{{catLines .MARKDOWN_FILES}}"

  lint:markdown:fix:
    desc: Fix markdown lint findings
    cmd:
      task: run-lint
      vars:
        CLI_NAME: markdownlint-cli2
        CLI_ARGS: [--fix, "{{catLines .MARKDOWN_FILES}}"]

  lint:shell:
    desc: Lint shell scripts
    cmds:
      - task: shellcheck
      - task: shfmt

  shellcheck:
    internal: true
    cmd:
      task: run-lint
      vars:
        CLI_NAME: shellcheck
        CLI_ARGS: ["{{catLines .SHELL_FILES}}"]

  shfmt:
    internal: true
    cmd:
      task: run-lint
      vars:
        CLI_NAME: shfmt
        CLI_ARGS: [--diff, --simplify, "{{catLines .SHELL_FILES}}"]

  lint:yaml:
    desc: Lint YAML files
    cmd:
      task: run-lint
      vars:
        CLI_NAME: yamllint
        CLI_ARGS: ["{{catLines .YAML_FILES}}"]

  # ----------------------------------------------------------------------------
  # Testing tasks
  # ----------------------------------------------------------------------------
  test:
    desc: Run all tests
    cmds:
      - task: test:unit

  test:unit:
    desc: Run unit tests
    cmd: go test -failfast -v -coverprofile=coverage.out -covermode=atomic ./...
